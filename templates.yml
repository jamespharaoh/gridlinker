---

# ========== generic

# First create the generic template. This is the common base for all the other
# templates, and doing it this way reduces disk space and speeds the process up
# because the common steps are done once and cloned cheaply.

- hosts: "generic-template"
  roles:

    - "lxc-create"

- hosts: "generic-template"
  roles:

    - "setup-system"
    - "install-system-packages"
    - "setup-common-users"
    - "node-template"

# ========== concrete

# Next we create the concrete templates, by which we mean each one of the actual
# templates which correspond to the container types. We run the common steps
# again here because the clone operation is a no-op if the container already
# exists, and so we won't see changes made to the generic template. Ansible is
# already going to quickly skip any tasks which are already complete, so this is
# not inefficient.

- hosts: "concrete-template"
  roles:

    - "lxc-clone"

- hosts: "concrete-template"
  roles:

    - "setup-system"
    - "install-system-packages"
    - "setup-common-users"
    - "node-template"

# ========== specific

# Finally we apply specific configuration to each of the concrete templates.
# This has to run in series, since that's how ansible works.

- hosts: "api-template"
  roles:

    - "node-api"
    - "install-nodejs"
    - "install-node-packages"
    - "deploy-api"

- hosts: "load-template"
  roles:

    - "node-load"

- hosts: "mongo-template"
  roles:

    - "node-mongo"
    - "install-mongodb"

- hosts: "web-template"
  roles:

    - "node-web"
    - "install-nodejs"
    - "install-node-packages"
    - "deploy-web"

- hosts: "rabbit-template"
  roles:

    - "node-rabbit"

- hosts: "browser-template"
  roles:

    - "node-browser"
    - "install-nodejs"
    - "install-node-packages"
    - "deploy-browser"

# ex: et ts=2 filetype=yaml
