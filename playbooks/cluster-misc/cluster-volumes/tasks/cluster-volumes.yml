---

- name: "create fileystems"
  with_items: "{{ cluster_volumes }}"
  become: "yes"
  action:

    module: "filesystem"
    dev: "{{ item.device }}"
    fstype: "{{ item.type }}"

- name: "mount filesystems"
  with_items: "{{ cluster_volumes }}"
  become: "yes"
  action:

    module: "mount"
    name: "{{ item.path }}"
    state: "mounted"
    fstype: "{{ item.type }}"
    src: "{{ item.device }}"

- name: "record system volume id"
  register: "system_volume_id_result"
  delegate_to: "wistla-{{ cluster_name }}-admin-a"
  become: "yes"
  args:

    executable: "/bin/bash"

  environment:

    AWS_DEFAULT_REGION: "{{ cluster.amazon_region }}"

  shell:

    set -euf -o pipefail;

    aws ec2 describe-instances
      --instance-id {{ instance_id }}
      --output text
      --query 'Reservations[*].Instances[*].BlockDeviceMappings[*].[DeviceName,Ebs.VolumeId]'
    | grep '^/dev/sda1'
    | cut -f2;

- name: "save system volume id"
  update_resource:

    volume_ids.system: "{{ system_volume_id_result.stdout }}"

- name: "record data volume id"
  when: "instance_type in [ 'app', 'data', 'jenkins' ]"
  register: "data_volume_id_result"
  delegate_to: "wistla-{{ cluster_name }}-admin-a"
  become: "yes"
  args:

    executable: "/bin/bash"

  environment:

    AWS_DEFAULT_REGION: "{{ cluster.amazon_region }}"

  shell:

    set -euf -o pipefail;

    aws ec2 describe-instances
      --instance-id {{ instance_id }}
      --output text
      --query 'Reservations[*].Instances[*].BlockDeviceMappings[*].[DeviceName,Ebs.VolumeId]'
    | grep '^/dev/sdg'
    | cut -f2;

- name: "save data volume id"
  when: "instance_type in [ 'app', 'data', 'jenkins' ]"
  update_resource:

    volume_ids.data: "{{ data_volume_id_result.stdout }}"

# ex: et ts=2 filetype=yaml
