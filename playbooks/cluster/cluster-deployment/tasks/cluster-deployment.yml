---

- name: "create deployment directory"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}"
    state: "directory"
    owner: "ubuntu"
    group: "ubuntu"
    mode: "0755"
  sudo: "yes"

- name: "create deployment link"
  action:
    module: "file"
    path: "/home/ubuntu/{{ cluster_deployment_name }}"
    state: "link"
    src: "{{ cluster_deployment_home }}"

- name: "create active deployment link"
  when: "
    cluster_deployment.type == 'alias'
    and cluster_deployment_alias.target == cluster_deployment_name
  "
  action:

    module: "file"
    path: "/home/ubuntu/{{ cluster_deployment.alias }}-active"
    state: "link"
    src: "{{ cluster_deployment_name }}"

- name: "checkout projects from git"
  shell:

    set -e;

    cd {{ cluster_deployment_home }};

    git clone
      git@github.com:/wistla/{{ item.name }}
      --branch {{ item.branch }};

  args:
    creates: "{{ cluster_deployment_home }}/{{ item.name }}"
  with_items: "cluster_deployment_checkouts"

- name: "run project build steps"
  shell: "{{ item.build_steps | default ([ 'true' ]) | join (' && ') }}"
  args:
    chdir: "{{ cluster_deployment_home }}/{{ item.name }}"
  tags: "build"
  with_items: "cluster_deployment_checkouts"

- name: "create config directory"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}/config"
    state: "directory"
  with_items: "cluster_deployment_shared_directories"

- name: "create config directories"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}/config/{{ item }}"
    state: "directory"
  with_items: "cluster_deployment_config_directories"

- name: "create shared link"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}/shared"
    state: "link"
    src: "../{{ cluster_deployment.alias }}/shared"
  when: "cluster_deployment.type == 'alias'"

- name: "create shared directory"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}/shared"
    state: "directory"
  with_items: "cluster_deployment_shared_directories"
  when: "cluster_deployment.type != 'alias'"

- name: "create shared directories"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}/shared/{{ item }}"
    state: "directory"
  with_items: "cluster_deployment_shared_directories"
  when: "cluster_deployment.type != 'alias'"

- name: "create config files"
  action:
    module: "template"
    src: "{{ item.template }}"
    dest: "{{ cluster_deployment_home }}/{{ item.target }}"
  with_items: "cluster_deployment_config_templates"

- name: "copy config files"
  action:
    module: "copy"
    src: "{{ HOME }}/{{ item.source }}"
    dest: "{{ cluster_deployment_home }}/{{ item.target }}"
    mode: "{{ item.mode }}"
  with_items: "cluster_deployment_config_files"

- name: "create links to config files"
  action:
    module: "file"
    path: "{{ cluster_deployment_home }}/{{ item.target }}"
    src: "{{ item.source }}"
    state: "link"
    force: "yes"
  with_items: "cluster_deployment_config_links"

- name: "stat override config files"
  action:
    module: "stat"
    path: "{{ cluster_deployment_home }}/{{ item.target }}"
  with_items: "cluster_deployment_override_templates"
  register: "cluster_deployment_stat_override_templates_result"

- name: "create override config templates"
  action:
    module: "template"
    dest: "{{ cluster_deployment_home }}/{{ item.1.target }}"
    src: "{{ item.1.template }}"
  with_indexed_items: "cluster_deployment_override_templates"
  when: "not cluster_deployment_stat_override_templates_result.results [item.0].stat.exists"

- name: "create deployment bridge network interface"
  action:
    module: "template"
    src: "cluster-deployment-bridge-interface"
    dest: "/etc/network/interfaces.d/{{ cluster_deployment.bridge_name }}.cfg"
  sudo: "yes"

- name: "start deployment network bridge"
  shell:

    set -e

    if ifquery --state {{ cluster_deployment.bridge_name }} >/dev/null; then
      echo "UNCHANGED";
      exit;
    fi

    ifup {{ cluster_deployment.bridge_name }};

  sudo: "yes"
  register: "ifup_result"
  changed_when: "ifup_result.stdout != 'UNCHANGED'"

- name: "create logrotate config"
  sudo: "yes"
  action:

    module: "template"
    dest: "/etc/logrotate.d/wistla-{{ cluster_deployment_name }}"
    src: "cluster-deployment-wistla-logrotate"

- name: "create routes"
  delegate_to: "localhost"
  when: "
    (
      instance_type != 'data'
      or instance_zone != 'a'
      or instance_index != 4
    ) and item
  "
  with_items:

    - "{{ cluster_network.routes_admin_a | default ('') }}"
    - "{{ cluster_network.routes_admin_b | default ('') }}"
    - "{{ cluster_network.routes_admin_c | default ('') }}"
    - "{{ cluster_network.routes_app_a | default ('') }}"
    - "{{ cluster_network.routes_app_b | default ('') }}"
    - "{{ cluster_network.routes_app_c | default ('') }}"
    - "{{ cluster_network.routes_data_a | default ('') }}"
    - "{{ cluster_network.routes_data_b | default ('') }}"
    - "{{ cluster_network.routes_data_c | default ('') }}"
    - "{{ cluster_network.routes_jenkins_a | default ('') }}"
    - "{{ cluster_network.routes_jenkins_b | default ('') }}"
    - "{{ cluster_network.routes_jenkins_c | default ('') }}"

  environment:

    AWS_DEFAULT_REGION: "{{ amazon_region }}"
    AWS_ACCESS_KEY_ID: "{{ amazon_accounts [amazon_account].access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ amazon_accounts [amazon_account].secret_key }}"

  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    aws ec2 create-route
      --route-table-id "{{ item }}"
      --destination-cidr-block "{{ [
        cluster_deployment.bridge_network,
        instance_index,
        cluster_zone_indices [instance_zone] * 64,
      ] | join ('.') }}/26"
      --instance-id "{{ instance_id }}"
    || true;

    aws ec2 replace-route
      --route-table-id "{{ item }}"
      --destination-cidr-block "{{ [
        cluster_deployment.bridge_network,
        instance_index,
        cluster_zone_indices [instance_zone] * 64,
      ] | join ('.') }}/26"
      --instance-id "{{ instance_id }}";

# ex: et ts=2 filetype=yaml
