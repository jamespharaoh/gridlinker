{{ ansible_warning ['//'] }}

{% set cluster_deployment_security = lookup ('file',
	HOME + '/security/deployments/' + cluster_deployment_name
) | from_yaml %}

var ROOT = process.cwd ();
var config = require(ROOT + '/config/config.global');

// public urls
config.adminUrl = 'https://{{ cluster_deployment_alias.admin_domain }}';
config.apiUrl = 'https://{{ cluster_deployment_alias.api_domain }}';
config.assetsUrl = 'https://{{ cluster_deployment_alias.assets_domain }}';
config.shortUrl = 'https://{{ cluster_deployment_alias.short_domain }}';
config.webUrl = 'https://{{ cluster_deployment_alias.web_domain }}';

// test urls
config.adminTest = 'http://{{ cluster_deployment_alias.admin_domain }}';
config.apiTest = 'http://{{ cluster_deployment.api_domain }}';
config.assetsTest = 'http://{{ cluster_deployment_alias.assets_domain }}';
config.shortTest = 'http://{{ cluster_deployment.short_domain }}';
config.webTest = 'http://{{ cluster_deployment.web_domain }}';

// email
config.emailDomain = '{{ cluster_deployment.email_domain }}';

// Database.

{% if cluster_name in [ 'staging', 'production' ] %}
config.dbUrl = [
{% for zone in cluster.instance_formation.data.zones %}
{% for instance in cluster.instance_formation.data.indices %}
	'mongodb://{{ cluster_deployment_alias.name }}-mongo-{{ zone }}-{{ instance }}:27017/wistla',
{% endfor %}
{% endfor %}
].join (',');
{% set mongo_write = '2' %}
{% else %}
config.dbUrl = 'mongodb://{{ cluster_deployment_alias.name }}-mongo-a-4:27017/wistla';
{% set mongo_write = '1' %}
{% endif %}

config.dbOptions = {
	replSet: {
		reconnectWait: 1000,
		socketOptions: { 
			connectTimeoutMS : 3000, 
			socketTimeoutMS: 3000 
		},
		rs_name: 'wistla-1-1',
	},
	db: {
		w: {{ mongo_write }},
		j: false,
		retryMiliSeconds: 2000
	},
};

// message exchange
config.amqpOptions = {
{% if cluster_name in [ 'production', 'staging' ] %}
	url: '{{ [
		'amqp://api:',
		third_parties [cluster_name].rabbit_api_password,
		'@',
		cluster_deployment_alias.name,
		'-rabbit-b-4',
	] | join }}', // TODO deprecate
	urls: [
{%	for zone in cluster.instance_formation.data.zones %}
{%	for instance in cluster.instance_formation.data.indices %}
		'{{ [
			'amqp://api:',
			third_parties [cluster_name].rabbit_api_password,
			'@',
			cluster_deployment_alias.name,
			'-rabbit-',
			zone,
			'-',
			instance,
		] | join }}',
{%	endfor %}
{%	endfor %}
	],
{% else %}
	url: '{{ [
		'amqp://api:',
		third_parties [cluster_name].rabbit_api_password,
		'@',
		cluster_deployment_alias.name,
		'-rabbit-a-4',
	] | join }}',
	urls: [
		'{{ [
			'amqp://api:',
			third_parties [cluster_name].rabbit_api_password,
			'@',
			cluster_deployment_alias.name,
			'-rabbit-a-4',
		] | join }}',
	],
{% endif %}
};


// rabbit rest api
config.rabbitRestApi = undefined; // only for test


// CORS
config.CORS = {
	origins: [

		'https://{{ cluster_deployment.admin_domain }}',
		'https://{{ cluster_deployment.api_domain }}',
		'https://{{ cluster_deployment.main_domain }}',
		'https://{{ cluster_deployment.short_domain }}',
		'https://{{ cluster_deployment.web_domain }}',

{% if cluster_deployment.type == 'alias' %}
		'https://{{ cluster_deployment_alias.admin_domain }}',
		'https://{{ cluster_deployment_alias.api_domain }}',
		'https://{{ cluster_deployment_alias.main_domain }}',
		'https://{{ cluster_deployment_alias.short_domain }}',
		'https://{{ cluster_deployment_alias.web_domain }}',
{% endif %}

	],
	credentials: true
};

{% if cluster_deployment_alias.blob_storage == 'amazon' %}

// amazon s3 blob storage
config.blobMode = 'amazon';
config.blobAmazon = {
	accessKey: '{{ cluster_deployment_security.api.access_key_id }}',
	secretKey: '{{ cluster_deployment_security.api.secret_access_key }}',
	bucketName: 'wistla-{{ cluster_deployment_alias.name }}-blobs',
	bucketPrefix: ''
};

{% else %}

// local blob storage
config.blobMode = 'local';

{% endif %}

// mailchimp
config.mailchimp = {
	listId: '{{ third_parties [cluster_name].mailchimp_unique_id }}',
	apiKey: '{{ third_parties [cluster_name].mailchimp_api_key }}',
};

// mandrill
config.mandrill = {
	apiKey: '{{ third_parties [cluster_name].mandrill_api_key }}'
};


// test data loader
config.loadingData = {
	email: '350477707572-gcc5pqssbhl7n29pbcs923havgbddh1e@developer.gserviceaccount.com',
	keyFile: '/config/google-service-account.key',
	cryptoKey: '{{ third_parties [cluster_name].google_maps_key }}'
};

// apple push notifications

config.applePush = {
{% if bool_native [cluster_deployment.apple_push_notifications_enabled] %}

	enabled: true,
	caCertFile: ROOT + '/config/apple-ca.cert',
	certFile: ROOT + '/config/apple-push.cert',
	keyFile: ROOT + '/config/apple-push.key',
	production: {{ bool_javascript [cluster_deployment.apple_push_notifications_production] }},
	validityInSeconds: 3600,
	feedbackIntervalInSeconds: 3600,
	feedbackEnabled: {{ bool_javascript [cluster_deployment.apple_feedback_service_enabled] }}
{% else %}

	enabled: false,
	feedbackEnabled: false
{% endif %}
};

// Analytics

if (!config.analytics || typeof config.analytics !== 'object') {
	config.analytics = {};
}

if (!config.analytics.provider || typeof config.analytics.provider !== 'object') {
	config.analytics.provider = {};
}

if (!config.analytics.provider.amplitude || typeof config.analytics.provider.amplitude !== 'object') {
	config.analytics.provider.amplitude = {};
}

if (!config.analytics.provider.aws || typeof config.analytics.provider.aws !== 'object') {
	config.analytics.provider.aws = {};
}

if (!config.analytics.provider.google || typeof config.analytics.provider.google !== 'object') {
	config.analytics.provider.google = {};
}

{% if cluster_name in third_parties %}
config.analytics.provider.amplitude.apiKey = '{{ third_parties[cluster_name].analytics_amplitude_key_api }}';
config.analytics.provider.amplitude.secretKey = '{{ third_parties[cluster_name].analytics_amplitude_key_secret }}';

config.analytics.provider.aws.appId = '{{ third_parties[cluster_name].analytics_aws_id_app }}';
config.analytics.provider.aws.appName = '{{ third_parties[cluster_name].analytics_aws_app_name }}';
config.analytics.provider.aws.identityPoolId = '{{ third_parties[cluster_name].analytics_aws_id_identity_pool }}';
config.analytics.provider.aws.region = '{{ third_parties[cluster_name].analytics_aws_region }}';

config.analytics.provider.google.trackerId = '{{ third_parties[cluster_name].analytics_google_id_tracker }}';
{% endif %}

if (!config.gcm || typeof config.gcm !== 'object') {
    config.gcm = {};
}
{% if cluster_name in third_parties %}
config.gcm.enabled = true;
config.gcm.apiKey = '{{ third_parties[cluster_name].google_cloud_messaging_api_key }}';
config.gcm.senderId = '{{ third_parties[cluster_name].google_cloud_messaging_sender_id }}';
config.gcm.appName = '{{ third_parties[cluster_name].google_cloud_messaging_app_name }}';
{% else %}
config.gcm.enabled = false;
config.gcm.apiKey = '';
config.gcm.senderId = '';
config.gcm.appName = '';
{% endif %}

{% if cluster_deployment_alias ['name'] in [ 'test-k2', 'test-montblanc', 'test-fitzroy' ] %}

{% if cluster_deployment_alias ['name'] == 'test-k2' %}
// Deep link url scheme for use in sending out emails.
config.urlScheme = '{{ third_parties ['production'].url_scheme }}';

// facebook app to use
config.authentication.facebook.appToUse = '{{ third_parties ['production'].facebook_app_to_use }}';

// facebook app configuration options
config.authentication.facebook.apps = {
	{{ third_parties ['production'].facebook_app_to_use }}: {
		appId: '{{ third_parties ['production'].facebook_app_id }}',
		appSecret: '{{ third_parties ['production'].facebook_app_secret }}',
		appAccessToken: '{{ third_parties ['production'].facebook_app_access_token }}'
	}
};
{% endif %}

{% if cluster_deployment_alias ['name'] in [ 'test-montblanc', 'test-fitzroy' ] %}
// Deep link url scheme for use in sending out emails.
config.urlScheme = '{{ third_parties ['dev'].url_scheme }}';

// facebook app to use
config.authentication.facebook.appToUse = '{{ third_parties ['dev'].facebook_app_to_use }}';

// facebook app configuration options
config.authentication.facebook.apps = {
	{{ third_parties ['dev'].facebook_app_to_use }}: {
		appId: '{{ third_parties ['dev'].facebook_app_id }}',
		appSecret: '{{ third_parties ['dev'].facebook_app_secret }}',
		appAccessToken: '{{ third_parties ['dev'].facebook_app_access_token }}'
	}
};
{% endif %}


{% else %}

// Deep link url scheme for use in sending out emails.
config.urlScheme = '{{ third_parties [cluster_name].url_scheme }}';

// facebook app to use
config.authentication.facebook.appToUse = '{{ third_parties [cluster_name].facebook_app_to_use }}';

// facebook app configuration options
config.authentication.facebook.apps = {
	{{ third_parties [cluster_name].facebook_app_to_use }}: {
		appId: '{{ third_parties [cluster_name].facebook_app_id }}',
		appSecret: '{{ third_parties [cluster_name].facebook_app_secret }}',
		appAccessToken: '{{ third_parties [cluster_name].facebook_app_access_token }}'
	}
};

{% endif %}

{% if bool_native [cluster_deployment.emails_enabled] %}

// Enable email sends.
config.sendEmails = true;

{% endif %}

// monitoring email address (for email activation warnings)
config.monitoringEmailAddress =
	'Wistla Operations <{{ cluster.monitoring_email }}>';
// content email address (for new wistls and wistl warnings)
config.contentEmailAddress = '{{ third_parties [cluster_name].content_email }}';

module.exports = config;

// ex: noet ts=4 filetype=javascript
