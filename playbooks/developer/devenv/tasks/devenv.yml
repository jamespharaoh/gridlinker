---

- name: "checkout projects from git"
  with_items: "devenv_checkouts"
  when: "deployment_mode == 'vagrant'"
  args:

    executable: "/bin/bash"
    creates: "{{ deployment_home }}/{{ item.name }}"

  shell:

    set -euf -o pipefail;

    cd {{ deployment_home }};

    git clone
      {{ git_base_url }}/{{ item.name }}
      --branch {{ item.branch }};

- name: "run build steps"
  tags: "build"
  with_items: "devenv_checkouts"
  args:

    executable: "/bin/bash"
    chdir: "{{ deployment_home }}/{{ item.name }}"
    creates: "{{ deployment_home }}/{{ item }}/node_modules"

  shell: "{{ item.build_steps | default (['true']) | join (' && ') }}"

- name: "create git pre-commit hooks"
  with_items: "devenv_checkouts"
  when: "deployment_mode == 'vagrant'"
  action:

    module: "template"
    dest: "{{ deployment_home }}/{{ item.name }}/.git/hooks/pre-commit"
    src: "devenv-git-hook-pre-commit"
    mode: "0755"

- name: "create git post-checkout hooks"
  with_items: "devenv_checkouts"
  when: "deployment_mode == 'vagrant'"
  action:

    module: "template"
    src: "devenv-git-hook-post-checkout"
    dest: "{{ deployment_home }}/{{ item.name }}/.git/hooks/post-checkout"
    mode: "0755"

- name: "create shared directories"
  with_items: "devenv_shared_directories"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item }}"
    state: "directory"

- name: "create config directories"
  with_items: "devenv_config_directories"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item }}"
    state: "directory"

- name: "create config files"
  with_items: "devenv_config_templates"
  sudo: "yes"
  action:

    module: "template"
    dest: "{{ deployment_home }}/config/{{ item.type }}/{{ item.target }}"
    src: "{{ item.template }}"

    owner: "{{ item.owner | default (vagrant_user) }}"
    group: "{{ item.group | default (vagrant_user) }}"
    mode: "{{ item.mode | default ('0644') }}"

- name: "stat override config files"
  with_items: "devenv_override_templates"
  register: "devenv_stat_override_templates_result"
  action:

    module: "stat"
    path: "{{ deployment_home }}/{{ item.target }}"

- name: "create override config templates"
  with_indexed_items: "devenv_override_templates"
  when: "not devenv_stat_override_templates_result.results [item.0].stat.exists"
  action:

    module: "template"
    dest: "{{ deployment_home }}/{{ item.1.target }}"
    src: "{{ item.1.template }}"

- name: "copy config files"
  with_items: "devenv_config_files"
  action:

    module: "copy"
    dest: "{{ deployment_home }}/config/{{ item.type }}/{{ item.target }}"
    src: "{{ item.source }}"
    mode: "0644"

- name: "copy config secrets"
  with_items: "devenv_config_secrets"
  when: "'dev' in secrets"
  action:

    module: "copy"
    dest: "{{ deployment_home }}/config/{{ item.type }}/{{ item.target }}"

    src: "{{ item.source }}"
    mode: "0600"

- name: "create links to config files"
  with_items: "devenv_config_links"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item.dest }}"
    state: "link"
    src: "{{ item.src }}"
    force: "yes"

- name: "create deployment name link"
  when: "deployment_mode == 'vagrant'"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ deployment_name }}"
    state: "link"

    src: "."

- name: "create bridge network interface"
  register: "devenv_bridge_create_result"
  sudo: "yes"
  action:

    module: "template"
    src: "devenv-bridge-interface"
    dest: "/etc/network/interfaces.d/{{ deployment.bridge_name }}.cfg"

- name: "stop network bridge"
  when: "devenv_bridge_create_result | changed"
  register: "devenv_bridge_stop_result"
  changed_when: "devenv_bridge_stop_result.stdout != 'UNCHANGED'"
  sudo: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if ! ifquery --state {{ deployment.bridge_name }} >/dev/null; then
      echo "UNCHANGED";
      exit;
    fi

    ifdown {{ deployment.bridge_name }};

- name: "start network bridge"
  register: "devenv_bridge_start_result"
  changed_when: "devenv_bridge_start_result.stdout != 'UNCHANGED'"
  sudo: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if ifquery --state {{ deployment.bridge_name }} >/dev/null; then
      echo "UNCHANGED";
      exit;
    fi

    ifup {{ deployment.bridge_name }};

# ex: et ts=2 filetype=yaml
