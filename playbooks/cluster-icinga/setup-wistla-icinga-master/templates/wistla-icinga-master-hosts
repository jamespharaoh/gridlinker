{{ ansible_warning ['//'] }}

{##############################################################################}

{% macro cluster_instances (
	other_cluster_name,
	instance_type) %}

{%	set other_cluster = clusters [other_cluster_name] %}
{%	set group_name = 'cluster-' + other_cluster_name + '-' + instance_type %}
{%	if group_name in groups %}

# --------- {{ instance_type }} instances

{%		for host_name in groups [group_name] %}
{%			set host = hostvars [host_name] %}
{%			if host.amazon_instance_state == 'running' %}

object Host "{{ host_name }}" {

	import "generic-host"

	address = "{{ host_name }}"

	command_endpoint = "wistla-{{ other_cluster_name }}-admin-{{ host.instance_zone }}"

	vars.endpoint = "{{ host_name }}"
	vars.cluster = "{{ other_cluster_name }}"
	vars.stature = "cluster"
	vars.type = "cluster-{{ instance_type }}"

{%				for volume in host.cluster_volumes %}

	vars.disks ["disk {{ volume.name }}"] = {
		disk_partitions = "{{ volume.path }}"
	}

{%				endfor %}

{%				if instance_type in [ 'app', 'data' ] %}

	vars.procs_warning = {{ [
		200,
		other_cluster.deployment_names | length * 100,
	] | sum }}

	vars.procs_critical = {{ [
		400,
		other_cluster.deployment_names | length * 100,
	] | sum }}

{%				endif %}

{%				if instance_type in [ 'jenkins' ] %}

	vars.procs_warning = {{ [
		300,
		host.jenkins_deployment_names | length * 100,
	] | sum }}

	vars.procs_critical = {{ [
		500,
		host.jenkins_deployment_names | length * 100,
	] | sum }}

{%				endif %}

}

{%			endif %}
{%		endfor %}
{%	endif %}
{% endmacro %}

{##############################################################################}

{% macro deployment_nodes (
	node_type,
	other_deployment_name,
	parent_instance_type,
	port_base) %}

{%	set other_deployment = deployments [other_deployment_name] %}
{%	set other_cluster_name = other_deployment.cluster_name %}
{%	set other_cluster = clusters [other_cluster_name] %}
{%	set instance_formation = other_cluster.instance_formation [parent_instance_type] %}

# --------- {{ node_type }} nodes

{%	for zone in instance_formation.zones %}
{%	for index in instance_formation.indices %}

{%		set host_name = [
			other_deployment_name,
			node_type,
			zone,
			index,
		] | join ('-') %}

{%		set parent_name = [
			'wistla',
			other_deployment.cluster_name,
			parent_instance_type,
			zone,
			index,
		] | join ('-') %}

{%		set parent = hostvars [parent_name] %}
{%		if parent.amazon_instance_state == 'running' %}

object Host "{{ host_name }}" {

	import "generic-host"

	address = "{{ host_name }}"

	command_endpoint = "wistla-{{ other_deployment.cluster_name }}-admin-{{ zone }}"

	vars.parent = "{{ parent_name }}"
	vars.endpoint = "{{ parent_name }}"
	vars.cluster = "{{ other_cluster_name }}"
	vars.deployment = "{{ other_deployment_name }}"
	vars.stature = "node"
	vars.type = "node-{{ node_type }}"

{%			if port_base %}
{%				for process_index in range (other_deployment.node_instance_count [node_type] | int) %}

	vars.wistla_{{ node_type }}s ["wistla {{ node_type }} {{ port_base + process_index }}"] = {
		http_port = {{ port_base + process_index }}
	}

{%				endfor %}
{%			endif %}

}

{%		endif %}

{%	endfor %}
{%	endfor %}

{% endmacro %}

{##############################################################################}

{% for other_cluster_name, other_cluster in clusters.items ()
if other_cluster.monitoring == 'yes' %}

# ==================== cluster {{ other_cluster_name }}

{#
object HostGroup "{{ other_cluster_name }}" {

	display_name = "{{ other_cluster_name | capitalize }} everything"

	assign where host.vars.cluster == "{{ other_cluster_name }}"

}
#}

object HostGroup "{{ other_cluster_name }}-instances" {

	display_name = "{{ other_cluster_name | capitalize }} instances"

	assign where (
		host.vars.stature == "cluster"
		&& host.vars.cluster == "{{ other_cluster_name }}"
	)

}

{% print cluster_instances (
	other_cluster_name,
	'admin') %}

{% print cluster_instances (
	other_cluster_name,
	'app') %}

{% print cluster_instances (
	other_cluster_name,
	'data') %}

{% print cluster_instances (
	other_cluster_name,
	'jenkins') %}

{% endfor %}

{##############################################################################}

{% for other_deployment_name, other_deployment in deployments.items () %}
{% if other_deployment.cluster_name in clusters
	and other_deployment.type in [ 'simple', 'shared', 'alias' ]
	and other_deployment.monitoring == 'yes' %}
{% set other_cluster = clusters [other_deployment.cluster_name] %}

# ==================== deployment {{ other_deployment_name }}

object HostGroup "{{ other_deployment_name }}-nodes" {

	display_name = "{{ other_deployment_name | capitalize }} nodes"

	assign where host.vars.deployment == "{{ other_deployment_name }}"

}

{%	if other_deployment.cluster_name == 'test' %}
{%		set app_instance_type = 'app' %}
{%		set data_instance_type = 'app' %}
{%	else %}
{%		set app_instance_type = 'app' %}
{%		set data_instance_type = 'data' %}
{%	endif %}

{%	if other_deployment.type in [ 'shared', 'simple' ] %}

{%		print deployment_nodes (
			'mongo',
			other_deployment_name,
			data_instance_type,
			None) %}

{%		print deployment_nodes (
			'rabbit',
			other_deployment_name,
			data_instance_type,
			None) %}

{%	endif %}

{%	if other_deployment.type in [ 'alias', 'simple' ] %}

{%		print deployment_nodes (
			'api',
			other_deployment_name,
			app_instance_type,
			7000) %}

{%		print deployment_nodes (
			'browser',
			other_deployment_name,
			app_instance_type,
			3000) %}

{%		print deployment_nodes (
			'load',
			other_deployment_name,
			app_instance_type,
			None) %}

{%		print deployment_nodes (
			'web',
			other_deployment_name,
			app_instance_type,
			3000) %}

{%	endif %}

{% endif %}
{% endfor %}
