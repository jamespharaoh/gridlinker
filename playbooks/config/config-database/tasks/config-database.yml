---

- name: "create database data dir"
  action:
    module: "file"
    path: "{{ postgresql_data }}"
    state: "directory"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0700"
  sudo: "yes"

- name: "create password file"
  when: "database_mode == 'master'"
  action:
    module: "copy"
    dest: "/tmp/pwfile"
    content: "{{ postgresql_master_password }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0600"
  sudo: "yes"

- name: "initialise database"
  when: "database_mode == 'master'"
  sudo: "yes"
  sudo_user: "{{ postgresql_user }}"
  args:
    creates: "{{ postgresql_data }}/init-flag"
    executable: "/bin/bash"
  shell:

    set -euf -o pipefail;

    "{{ postgresql_lib }}/bin/initdb"
      --pgdata "{{ postgresql_data }}"
      --pwfile "/tmp/pwfile"
      --username "{{ postgresql_user }}"
      --encoding "unicode"
      --auth trust
      --auth-local trust
      --auth-host md5;

    touch "{{ postgresql_data }}/init-flag";

- name: "begin replication"
  when: "database_mode == 'slave'"
  sudo: "yes"
  sudo_user: "{{ postgresql_user }}"
  environment:
    PGUSER: "{{ postgresql_replication_user }}"
    PGPASSWORD: "{{ postgresql_replication_password }}"
  args:
    creates: "{{ postgresql_data }}/init-flag"
    executable: "/bin/bash"
  shell:

    set -euf -o pipefail;

    "{{ postgresql_lib }}/bin/pg_basebackup"
      --write-recovery-conf
      --pgdata "{{ postgresql_data }}"
      --host "{{ database_master_address }}"
      --port "{{ database_master_port }}";

    touch "{{ postgresql_data }}/init-flag";

- name: "create postgresql hba config"
  action:
    module: "template"
    dest: "{{ postgresql_data }}/pg_hba.conf"
    src: "database-postgresql-hba-config"
  sudo: "yes"

- name: "create postgresql main config"
  action:
    module: "template"
    dest: "{{ postgresql_data }}/postgresql.conf"
    src: "database-postgresql-config"
  sudo: "yes"

# ex: et ts=2 filetype=yaml
