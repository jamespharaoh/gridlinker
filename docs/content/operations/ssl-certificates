Short-Title: SSL certificates
Long-Title: SSL certificates
Description: Management of SSL certificates

Wistla has a policy of using encryption wherever appropriate to protect private
data, including both our own intellectual property and customer information.
This document describes the operational tasks required to manage the SSL
certificates are a key part of this security infrastructure.

## Certificate management tools

There are two tools integrated into `wistla-devops` to automate most of the
tasks relating to certificates. The certificate database tool is used to create
certificate requests and import signed certificates. The certificate authority
tool is used to manage private certificate authorities and sign certificates for
internal use.

Both of these tools are accessed via the command-line tool `wistla-devops`, and
include built-in help which you can use to explore their functionality:

```
./wistla-devops certificate --help
```

## Obtaining and renewing HTTPS certificates

We currently use [ssls.com](https://www.ssls.com/) to purchase our public SSL
certificates, specifically the [Comodo Positive SSL certificates]
(https://www.ssls.com/ssl-certificates/comodo-positivessl). The login details
are, of course, in lastpass.

We are looking into using the new free certificate service [Let's Encrypt]
(https://letsencrypt.org/), but we are not yet ready to make this change.

We should receive reminder notifications when a certificate is going to expire.
These are sent to ssls.com@wistla.com, which is an alias of the group
ops.root@wistla.com.

You can also view the certificates in a specific database in order of the expiry
date:

```
database="xxx"

./wistla-devops certificate database search \
    --database $database \
    --order-by-expiry
```

Additionally, if you access the site which is secured by a certificate, your
browser should be able to show you details of the certificate, including the
expiry date.

There are several certificate databases, one for each of the separate clusters.
You can view a list of certificate databases using the following command:

```
./wistla-devops certificate database list
```

At the time of writing, the following certificate databases exist:

* `ops-ssl`
* `test-ssl`
* `staging-ssl`
* `production-ssl`

Dev certificates will be in the ops database, since their HTTPS termination is
handled by the ops cluster.

To create a certificate request, use the following command:

```
database="xxx-ssl"
common_name="yyy.wistla.com"

./wistla-devops certificate database request \
    --database "$database" \
    --common-name "$common_name" \
    --alt-dns "$common_name" \
    --alt-dns "www.$common_name" \
    --print-request
```

This will generate a public/private keypair, and a certificate signing request
(CSR), which will be stored automatically in the database. The CSR will be
displayed, and can be cut and pasted into the appropriate form during the
certificate activation process on ssls.com.

You should be able to use the email authentication method, sending the email to
either administrator@wistla.com or administrator@wist.la, which are both aliases
of ops.root@wistla.com. If these options are not available, then you will need
to figure out by yourself how to authorise the certificate.

The authorisation email contains a link and a randomly generated string. Copy
the random string, click, on the link, paste in the code, and then submit the
form to complete the authorisation.

Within a few minutes, the certificate should arrive to the email specified
during the activation process. Only the certificate for the domain itself is
needed, since the other certificates in the chain are always the same and are
already stored in the wistla-devops project. Save the certificate insde of the
wistla-devops directory.

Use the following command to load the signed certificate into the system.

```
database="xxx-ssl"
common_name="yyy.wistla.com"
certificate_filename="zzz.cert"

./wistla-devops certificate database signed \
    --database "$database" \
    --common-name "$common_name" \
    --certificate "$certificate_filename" \
    --certificate "security/ssl/comodo-chain-1.cert" \
    --certificate "security/ssl/comodo-chain-2.cert" \
    --certificate "security/ssl/comodo-chain-3.cert" \
    --ignore-subject-mismatch
```

If this is a new certificate, then it will need to be added to the appropriate
cluster configuration, either under `app_certificates` or `admin_certificates`,
depending on the type of server they will be used on. In general, production
staging and test traffic is always terminated on the app instances, whereas the
ops cluster does not have app instances, and the admin instances terminate
traffic both for the dev environments, connected via the VPN, and other servies
such as icinga and jenkins.

```
cluster_name="xxx"

./wistla-devops resource edit \
    --name "cluster/$cluster_name"
```

NB: In some cases, the certificate might be used elsewhere, for example in an
AWS cloudfront distribution, or some other third party service. The details of
these processes are currently out of the scope of this document.

Finally, you'll need to redeploy the nginx configuration with the new
certificates.

For ops:

```
./run-ansible playbooks/cluster-admin.yml \
   --limit cluster-ops \
   --tags cluster-admin-nginx
```

For test:

```
./run-ansible playbooks/cluster-app.yml \
   --limit cluster-test \
   --tags cluster-app-nginx
```

For staging:

```
./run-ansible playbooks/cluster-app.yml \
   --limit $(comma cluster-staging{,-2} \
   --tags cluster-app-nginx
```

Please be careful when deploying to production, because an error in the
configuration may cause nginx to attempt a restart but not come back online. To
avoid this, we would always deploy first to a single server. If one server goes
offline, the load balancers should automatically route traffic to the other
servers, so this is not an issue.

```
./run-ansible playbooks/cluster-app.yml \
    --limit wistla-production-app-a-4 \
    --tags cluster-app-nginx
```

Once you are confident that the deployment has completed successfully, you can
deploy to the rest of the production servers:

```
./run-ansible playbooks/cluster-app.yml \
   --limit $(comma cluster-production{,-2} \
   --tags cluster-app-nginx
```

Finally, check the new certificate has been correctly installed, by accessing
the appropriate URL from a web browser.
