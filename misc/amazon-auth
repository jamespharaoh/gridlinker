#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import with_statement

import sys

sys.path.append (
	"third-party/boto")

sys.path.append (
	"third-party/pyyaml/lib")

import boto
import os
import time
import yaml

from boto.s3.connection import S3Connection
from boto.sts import STSConnection

current_time = int (time.time ())

def main ():

	clean_environment ()
	load_config ()

	if len (sys.argv) == 1:

		authenticate_with_mfa ()

	else:

		load_credentials ()

	mfa_timestamp = all_credentials.get ("mfa-timestamp", 0)
	temporary_timestamp = all_credentials.get ("temporary-timestamp", 0)

	if current_time < mfa_timestamp + 24 * 60 * 60 \
	and temporary_timestamp + 30 * 60 < current_time:

		obtain_temporary_credentials ()

	if len (sys.argv) == 2 and sys.argv [1] != "auto":

		print_variables (sys.argv [1])

def clean_environment ():

	for key in [
		"AWS_ACCESS_KEY_ID",
		"AWS_SECRET_ACCESS_KEY",
		"AWS_SESSION_TOKEN",
	]:

		if key in os.environ:
			del os.environ [key]

def load_config ():

	global CONFIG
	global AMAZON_ACCOUNTS

	with open ("config/overrides.yml") as file_handle:
		CONFIG = yaml.load (file_handle)

	with open ("data/amazon-accounts") as file_handle:
		AMAZON_ACCOUNTS = yaml.load (file_handle)

def authenticate_with_mfa ():

	global all_credentials

	mfa_token = raw_input ("Please enter your Wistla AWS MFA code: ")

	sts_connection = STSConnection ()

	mfa_serial_number = "arn:aws:iam::%s:mfa/%s" % (
		AMAZON_ACCOUNTS ["admin"] ["numeric"].replace ("-", ""),
		CONFIG ["developer_email"])

	admin_credentials = sts_connection.get_session_token (
		duration = 24 * 60 * 60,
		mfa_serial_number = mfa_serial_number,
		mfa_token = mfa_token)

	all_credentials = {
		"mfa-timestamp": current_time,
		"temporary-timestamp": 0,
		"admin": {
			"access_key": admin_credentials.access_key,
			"secret_key": admin_credentials.secret_key,
			"session_token": admin_credentials.session_token,
		},
	}

	sys.stderr.write ("Successfully authenticated for 24 hours\n")

def load_credentials ():

	global all_credentials

	with open ("work/amazon-credentials") as file_handle:
		all_credentials = yaml.load (file_handle)

def obtain_temporary_credentials ():

	sys.stderr.write ("Obtaining temporary credentials\n")

	admin_credentials = all_credentials ["admin"]

	sts_connection = STSConnection (
		aws_access_key_id = admin_credentials ["access_key"],
		aws_secret_access_key = admin_credentials ["secret_key"],
		security_token = admin_credentials ["session_token"])

	for account in [ "production", "staging", "test", "ops" ]:

		assumed_role = sts_connection.assume_role (
			role_arn = "arn:aws:iam::%s:role/super" % (
				AMAZON_ACCOUNTS [account] ["numeric"].replace ("-", "")),
			role_session_name = "%s-super" % (
				account),
			duration_seconds = 3600)

		account_credentials = assumed_role.credentials

		all_credentials [account] = {
			"access_key": account_credentials.access_key,
			"secret_key": account_credentials.secret_key,
			"session_token": account_credentials.session_token,
		}

	all_credentials ["temporary-timestamp"] = current_time

	with open ("work/amazon-credentials", "w") as file_handle:

		yaml.safe_dump (
			all_credentials,
			file_handle,
			default_flow_style = False,
			allow_unicode = True,
			explicit_start = True)

def print_variables (account_name):

	account_credentials = all_credentials [account_name]

	print ("export AWS_ACCESS_KEY_ID=\"%s\"" % (
		account_credentials ["access_key"]))

	print ("export AWS_SECRET_ACCESS_KEY=\"%s\"" % (
		account_credentials ["secret_key"]))

	print ("export AWS_SESSION_TOKEN=\"%s\"" % (
		account_credentials ["session_token"]))

main ()

# ex: noet ts=4 filetype=python
