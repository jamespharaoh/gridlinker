#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import yaml

main_path = __file__

while os.path.islink (main_path):

	main_path = os.path.normpath (
		os.path.join (
			os.path.dirname (main_path),
			os.readlink (main_path)))

SCRIPT = os.path.basename (__file__)

HOME = os.path.abspath (os.path.dirname (main_path) + "/../../..")

with open ("%s/data/project" % HOME) as file_handle:
	METADATA = yaml.load (file_handle)

METADATA_PATHS = METADATA.setdefault ("paths", {})
CONFIG = METADATA_PATHS.setdefault ("config", "config")
OVERRIDES = METADATA_PATHS.setdefault ("overrides", "%s/overrides.yml" % CONFIG)
CONNECTIONS = METADATA_PATHS.setdefault ("connections", "%s/connections.yml" % CONFIG)
WORK = METADATA_PATHS.setdefault ("work", "work")

os.environ [METADATA ["environment"] ["devops_home_path"]] = HOME

sys.path.append (HOME + "/python")
sys.path.append (HOME + "/third-party/gridlinker/python")

if not os.path.isdir ("%s/%s" % (HOME, CONFIG)):
	os.mkdir ("%s/%s" % (HOME, CONFIG))

if not os.path.isfile ("%s/%s" % (HOME, OVERRIDES)):

	with open ("%s/%s" % (HOME, OVERRIDES), "w") as file_handle:

		file_handle.write ("".join ([
			"---\n\n",
			"{}\n\n",
			"# ex: et ts=2 filetype=yaml\n",
		]))

if not os.path.isfile ("%s/%s" % (HOME, CONNECTIONS)):

	with open ("%s/%s" % (HOME, CONNECTIONS), "w") as file_handle:

		file_handle.write ("".join ([
			"---\n\n",
			"local:\n\n",
			"  etcd_servers:\n",
			"    - \"127.0.0.1\"\n\n",
			"  etcd_secure: \"no\"\n\n",
			"  etcd_prefix: \"/%s\"\n\n" % (
				METADATA ["etcd"] ["default_prefix"]),
			"# ex: et ts=2 filetype=yaml\n",
		]))

if not os.path.isdir ("%s/%s" % (HOME, WORK)):

	os.mkdir ("%s/%s" % (HOME, WORK))

if not os.path.isdir ("%s/work/control" % HOME):

	os.mkdir ("%s/work/control" % HOME)

os.environ [METADATA ["environment"] ["devops_script"]] = SCRIPT

if SCRIPT.startswith (METADATA ["project"] ["name"] + "-"):
	CONNECTION = SCRIPT [len (METADATA ["project"] ["name"]) + 1 : ]
else:
	CONNECTION = SCRIPT

os.environ [METADATA ["environment"] ["devops_connection_name"]] = CONNECTION

import gridlinker

from gridlinker import GenericContext

def main ():

	parser = argparse.ArgumentParser ()
	sub_parsers = parser.add_subparsers ()

	gridlinker.args (sub_parsers)

	args = parser.parse_args ()
	context = GenericContext (HOME, CONNECTION, METADATA)

	args.func (context, args)

main ()

# ex: noet ts=4 filetype=python
