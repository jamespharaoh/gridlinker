#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import unicode_literals

import os
import sys

def outer_main ():

	setup_imports ()

	from wbs import error_exit
	from wbs import ReportableError

	try:

		load_config ()
		inner_main ()

	except ReportableError as error:

		error_exit (error)

def setup_imports ():

	global HOME
	global SCRIPT

	main_path = __file__

	while os.path.islink (main_path):

		main_path = (
			os.path.normpath (
				os.path.join (
					os.path.dirname (main_path),
					os.readlink (main_path))))

	SCRIPT = (
		os.path.basename (
			__file__))

	HOME = (
		os.path.abspath (
			"%s/../../.." % (
				os.path.dirname (
					main_path))))

	sys.path.append (
		"%s/python" % HOME)

	sys.path.append (
		"%s/third-party/pyyaml/lib" % HOME)

	import yaml

	with open ("%s/third-party/third-party-index" % HOME) as file_handle:

		third_party_index = (
			yaml.load (
				file_handle))

	for third_party_name, third_party_data \
	in third_party_index.items ():

		if not "python" in third_party_data:
			continue

		if isinstance (third_party_data ["python"], str) \
		or isinstance (third_party_data ["python"], unicode):

			sys.path.append (
				"%s/third-party/%s" % (
					HOME,
					third_party_data ["python"]))

		elif isinstance (third_party_data ["python"], list):

			for python_item in third_party_data ["python"]:

				sys.path.append (
					"%s/third-party/%s" % (
						HOME,
						python_item))

		else:

			raise Exception ()

def load_config ():

	import gridlinker

	global METADATA
	global CONNECTION

	METADATA = gridlinker.metadata.load (HOME)

	METADATA_PATHS = METADATA.setdefault ("paths", {})
	CONFIG = METADATA_PATHS.setdefault ("config", "config")
	OVERRIDES = METADATA_PATHS.setdefault ("overrides", "%s/overrides.yml" % CONFIG)
	CONNECTIONS = METADATA_PATHS.setdefault ("connections", "%s/connections.yml" % CONFIG)
	WORK = METADATA_PATHS.setdefault ("work", "work")

	os.environ [METADATA ["environment"] ["devops_home_path"]] = HOME

	if not os.path.isdir ("%s/%s" % (HOME, CONFIG)):
		os.mkdir ("%s/%s" % (HOME, CONFIG))

	if not os.path.isfile ("%s/%s" % (HOME, OVERRIDES)):

		with open ("%s/%s" % (HOME, OVERRIDES), "w") as file_handle:

			file_handle.write ("".join ([
				"---\n\n",
				"{}\n\n",
				"# ex: et ts=2 filetype=yaml\n",
			]))

	if not os.path.isfile ("%s/%s" % (HOME, CONNECTIONS)):

		with open ("%s/%s" % (HOME, CONNECTIONS), "w") as file_handle:

			file_handle.write ("---\n\n")

			yaml.safe_dump (
				METADATA ["etcd"] ["default_connections"],
				file_handle)

			file_handle.write ("\n# ex: et ts=2 filetype=yaml\n")

	if not os.path.isdir ("%s/%s" % (HOME, WORK)):

		os.mkdir ("%s/%s" % (HOME, WORK))

	if not os.path.isdir ("%s/work/control" % HOME):

		os.mkdir ("%s/work/control" % HOME)

	os.environ [METADATA ["environment"] ["devops_script"]] = SCRIPT

	if SCRIPT.startswith (METADATA ["project"] ["name"] + "-"):
		CONNECTION = SCRIPT [len (METADATA ["project"] ["name"]) + 1 : ]
	else:
		CONNECTION = SCRIPT

	os.environ [METADATA ["environment"] ["devops_connection_name"]] = CONNECTION

def inner_main ():

	import gridlinker
	from gridlinker import GenericContext

	parser = argparse.ArgumentParser ()
	sub_parsers = parser.add_subparsers ()

	gridlinker.args (sub_parsers)

	args = parser.parse_args ()
	context = GenericContext (HOME, CONNECTION, METADATA)

	args.func (context, args)

outer_main ()

# ex: noet ts=4 filetype=python
