#!/bin/bash

set -euf -o pipefail

cd "$(dirname "$0")"

if ! test -f config/datingnode-config; then
	echo "Please create config/datingnode-config file" >&2
	exit 1
fi

source "config/datingnode-config"

script="./datingnode"

done_devops=""

function do_devops () {

	if test "$done_devops"; then
		return
	fi

	"$script-local" ansible playbook -- \
		"playbooks/devops.yml"

	sleep 0.5

	done_devops="yes"

}

function do_hosts () {

	do_devops

	$master_ansible \
		--extra-vars "@config/deploy-config" \
		--extra-vars "@config/runtime-config" \
		--extra-vars "cluster_name=shared" \
		--inventory "hosts" \
		"playbooks/hosts.yml" \
		"$@"

}

function build_image () {

	base_image="$1"
	image_name="$2"
	container_name="$3"
	build_name="$4"

	do_devops

	# kill and remove existing container

	docker kill "$container_name" &>/dev/null || true

	docker rm "$container_name" &>/dev/null || true

	# use existing image as base, if it exists

	if docker inspect "$image_name:$BUILD_NAME" &>/dev/null; then
		echo "updating existing image"
		base_image="$image_name:$BUILD_NAME"
	else
		echo "creating new image"
	fi

	# create temp dir

	temp="$(pwd)/work/temp"
	sudo rm -rf "$temp"
	mkdir -p "$temp"
	mkdir -p "$temp/apt-lists"
	mkdir -p "$temp/apt-cache"
	sudo chown -R root:root "$temp"
	sudo chmod 1777 "$temp"

	# run the ansible scripts in a container

	docker run \
		--name "$container_name" \
		--volume "$(pwd):/datingnode-ansible" \
		--volume "$DATINGNODE_SUPER:/datingnode-super" \
		--volume "$temp:/tmp" \
		--volume "$temp/apt-lists:/var/lib/apt/lists" \
		--volume "$temp/apt-cache:/var/cache/apt" \
		--dns "$DNS_PRIMARY" \
		--dns "$DNS_SECONDARY" \
		--interactive \
		--tty \
		"$base_image" \
		/datingnode-ansible/misc/docker-ansible-script \
		"$build_name"

	# remove existing image

	echo "remove existing..."

	docker rmi "$image_name" &>/dev/null || true
	docker rmi "$image_name:$BUILD_NAME" &>/dev/null || true
	docker rmi "$image_name:$BUILD_ID" &>/dev/null || true

	# commit and tag new image

	echo "commit..."

	image_id=$(
		docker commit "$container_name"
	)

	echo "tag new..."

	docker tag -f "$image_id" "$image_name"
	docker tag -f "$image_id" "$image_name:$BUILD_NAME"
	docker tag -f "$image_id" "$image_name:$BUILD_ID"

	# remove container

	echo "remove container..."

	docker rm "$container_name" &>/dev/null

	# done

	echo "done!"

}

# --------- image clean

function do_image_clean () {

	for container in "${CONTAINERS[@]}"; do

		echo "Removing container $container"

		docker kill "$container" &>/dev/null || true

		docker rm "$container" &>/dev/null || true

	done

	for image_name in "${IMAGES[@]}"; do

		echo "Removing image $image_name"

		docker rmi "$image_name:$BUILD_NAME" &>/dev/null || true
		docker rmi "$image_name:$BUILD_ID" &>/dev/null || true

	done

}

# --------- images

function do_image_build_base () {

	build_image \
		"$IMAGE_UBUNTU" \
		"$IMAGE_BASE" \
		"$CONTAINER_BASE" \
		"base"

}

function do_image_build_database () {

	build_image \
		"$IMAGE_BASE:$BUILD_ID" \
		"$IMAGE_DATABASE" \
		"$CONTAINER_DATABASE" \
		"database"

}

function do_image_build_web_server () {

	build_image \
		"$IMAGE_BASE:$BUILD_ID" \
		"$IMAGE_WEB_SERVER" \
		"$CONTAINER_WEB_SERVER" \
		"web-server"

}

function do_image_build_web_application () {

	build_image \
		"$IMAGE_WEB_SERVER:$BUILD_ID" \
		"$IMAGE_WEB_APPLICATION" \
		"$CONTAINER_WEB_APPLICATION" \
		"web-application"

}

function do_image_build_vhost_proxy () {

	build_image \
		"$IMAGE_BASE:$BUILD_ID" \
		"$IMAGE_VHOST_PROXY" \
		"$CONTAINER_VHOST_PROXY" \
		"vhost-proxy"

}

function do_image_build_memcache () {

	build_image \
		"$IMAGE_BASE:$BUILD_ID" \
		"$IMAGE_MEMCACHE" \
		"$CONTAINER_MEMCACHE" \
		"memcache"

}

# ---------- image push

function do_image_push () {

	image_name="$1"

	docker push "$image_name:$BUILD_ID"

}

# --------- help

if test "$#" = 0; then

	cat >&2 <<-EOF

		Dating Node devops script

		Usage:

		   $0 COMMAND...

		Available commands:

		   Manage docker images:
		      image-clean        Delete all images
		      image-build-inc    Increment build number
		      image-build-all    Build all images
		      image-build-IMAGE  Build specified image
		      image-push-all     Push all images
		      image-push-IMAGE   Push specified image (TODO)

	EOF

	exit

fi

# ----------- main

command="$1"
shift

case "$command" in

(image-clean)
	do_image_clean
	;;

(image-build-inc)

	let BUILD_VERSION="BUILD_VERSION + 1"
	echo "$BUILD_VERSION" >config/build-counter

	"$script-local" resource update \
		--name "cluster/$CLUSTER_NAME" \
		--set "build.vhost_proxy" "$CLUSTER_NAME-$BUILD_VERSION" \
		--set "build.database" "$CLUSTER_NAME-$BUILD_VERSION" \
		--set "build.web_application" "$CLUSTER_NAME-$BUILD_VERSION" \
		--set "build.memcache" "$CLUSTER_NAME-$BUILD_VERSION"

	"$script-local" ansible playbook -- \
		"playbooks/devops.yml"

	;;

(image-build-all)
	do_image_build_base
	do_image_build_database
	do_image_build_web_server
	do_image_build_web_application
	do_image_build_vhost_proxy
	do_image_build_memcache
	echo ""
	echo "all done sir!"
	;;

(image-build-*)
	image="${command##image-build-}"
	do_image_build_$(echo $image | tr '-' '_')
	;;

(image-push-all)
	do_image_push "$IMAGE_DATABASE"
	do_image_push "$IMAGE_WEB_APPLICATION"
	do_image_push "$IMAGE_VHOST_PROXY"
	do_image_push "$IMAGE_MEMCACHE"
	;;

(image-push-*)
	image="${command##image-push-}"
	image_var="IMAGE_$(echo $image | tr '-' '_' | tr 'a-z' 'A-Z')"
	do_image_push "${!image_var}"
	;;

(*)
	echo "Error '$command'"
	exit 1
	;;

esac
