---

- name: "clone lxc container"
  delegate_to: "localhost"
  args:

    executable: "/bin/bash"
    creates: "/var/lib/lxc/{{ inventory_hostname }}/create-flag"

  become: "yes"
  shell:

    set -euf -o pipefail;

    source {{ deployment_home }}/wistla-devops/misc/locking ansible;

    exlock;

    if test -f /var/lib/lxc/{{ inventory_hostname }}; then
      set +e;
      lxc-stop
        --name {{ inventory_hostname }};
      lxc-destroy
        --name {{ inventory_hostname }};
      rm -rf /var/lib/lxc/{{ inventory_hostname }};
      btrfs subvolume delete /var/lib/lxc/{{ inventory_hostname }}/rootfs;
      set -e;
    fi;

    lxc-clone
      --backingstore btrfs
      {{ node_clone_from }}
      {{ inventory_hostname }};

    chgrp {{ deployment_user }} /var/lib/lxc/{{ inventory_hostname }};

    touch /var/lib/lxc/{{ inventory_hostname }}/create-flag;

- name: "create lxc config"
  delegate_to: "localhost"
  become: "yes"
  action:

    module: "template"
    dest: "/var/lib/lxc/{{ inventory_hostname }}/config"
    src: "lxc-config"

- name: "create shared dir"
  delegate_to: "localhost"
  become: "yes"
  action:

    module: "file"
    path: "/var/lib/lxc/{{ inventory_hostname }}/rootfs/shared"
    state: "directory"

- name: "create host data dir"
  delegate_to: "localhost"
  become: "yes"
  action:

    module: "file"
    path: "{{ deployment_home }}/shared/{{ inventory_hostname }}"
    state: "directory"

- name: "create host data dirs"
  with_items: "{{ data_dirs }}"
  delegate_to: "localhost"
  become: "yes"
  action:

    module: "file"
    path: "{{ deployment_home }}/shared/{{ inventory_hostname }}/{{ item.name }}"
    state: "directory"

    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"

- name: "create container data dirs"
  with_items: "{{ data_dirs }}"
  delegate_to: "localhost"
  become: "yes"
  action:

    module: "file"
    path: "/var/lib/lxc/{{ inventory_hostname }}/rootfs/{{ item.path }}"
    state: "directory"

- name: "bind mount config directory"
  when: "node_is_template == 'yes'"
  delegate_to: "localhost"
  become: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if ! cut -d' ' -f2 </dev/mounts
      | grep -x {{ node_rootfs_path }}/config;
    then

      mount -o bind
        "{{ deployment_home }}/config/{{ node_type }}"
        "{{ node_rootfs_path }}/config";

    fi;

# ex: et ts=2 filetype=yaml
