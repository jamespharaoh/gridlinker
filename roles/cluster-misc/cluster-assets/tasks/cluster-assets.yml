---

- name: "create work directories"
  with_items:

    - "{{ [
        WORK,
        '/cluster'
      ] | join }}"

    - "{{ [
        WORK,
        '/cluster/',
        cluster_name,
      ] | join }}"

    - "{{ [
        WORK,
        '/cluster/',
        cluster_name,
        '/certificates',
      ] | join }}"

    - "{{ [
        WORK,
        '/cluster/',
        cluster_name,
        '/cloudformation',
      ] | join }}"

  action:

    module: "file"
    path: "{{ item }}"
    state: "directory"

- name: "write certificate chain to files"
  action:

    module: "copy"
    dest: "{{ [
      WORK,
      '/cluster/',
      cluster_name,
      '/certificates/comodo-certificate-chain.cert',
    ] | join }}"
    content: "{{ [
      lookup (
        'etcd',
        '/certificate/production-ssl/subjects/wistla.com/current/chain/0'),
      lookup (
        'etcd',
        '/certificate/production-ssl/subjects/wistla.com/current/chain/1'),
      lookup (
        'etcd',
        '/certificate/production-ssl/subjects/wistla.com/current/chain/2'),
    ] | join ('\n') + '\n' }}"

- name: "write security credentials to files"
  with_nested:

    - "{{ cluster.deployment_names | default ([]) }}"

    - - source: "certificate"
        target: "cert"
        mode: "0644"

      - source: "key"
        target: "key"
        mode: "0600"

  when: "deployments [item.0].type in [ 'shared', 'simple' ]"
  action:

    module: "copy"
    dest: "{{ [
      WORK,
      '/cluster/',
      cluster_name,
      '/certificates/',
      deployments [item.0].assets_domain,
      '-',
      deployments [item.0].assets_certificate_name,
      '.',
      item.1.target,
    ] | join }}"
    content: "{{
      lookup (
        'etcd',
        [
          '/certificate/',
          supercluster_name,
          '-ssl/subjects/',
          deployments [item.0].assets_domain,
          '/current/',
          item.1.source,
        ] | join)
      }}"
    mode: "{{ item.1.mode }}"

- name: "convert private key to other format"
  with_items: "{{ cluster.deployment_names | default ([]) }}"
  when: "deployments [item].type in [ 'shared', 'simple' ]"
  args:

    creates: "{{ [
      WORK,
      '/cluster/',
      cluster_name,
      '/certificates/',
      deployments [item].assets_domain,
      '-',
      deployments [item].assets_certificate_name,
      '.awskey',
    ] | join }}"
    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    openssl rsa -outform pem
      -in "{{ [
        WORK,
        '/cluster/',
        cluster_name,
        '/certificates/',
        deployments [item].assets_domain,
        '-',
        deployments [item].assets_certificate_name,
        '.key',
      ] | join }}"
      -out "{{ [
        WORK,
        '/cluster/',
        cluster_name,
        '/certificates/',
        deployments [item].assets_domain,
        '-',
        deployments [item].assets_certificate_name,
        '.awskey',
      ] | join }}"

- name: "upload assets certificate"
  with_items: "{{ cluster.deployment_names | default ([]) }}"
  when: "deployments [item].type in [ 'shared', 'simple' ]"
  args:

    executable: "/bin/bash"

  environment:

    AWS_DEFAULT_REGION: "{{ amazon_region_name }}"

    AWS_ACCESS_KEY_ID: "{{ amazon_credentials [amazon_account_name].access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ amazon_credentials [amazon_account_name].secret_key }}"
    AWS_SESSION_TOKEN: "{{ amazon_credentials [amazon_account_name].session_token }}"

  shell:

    set -euf -o pipefail;

    aws iam upload-server-certificate
      --path "/cloudfront/"
      --server-certificate-name "{{ [
        deployments [item].assets_domain,
        '-',
        deployments [item].assets_certificate_name,
      ] | join }}"
      --certificate-body "{{ [
        'file://',
        WORK,
        '/cluster/',
        cluster_name,
        '/certificates/',
        deployments [item].assets_domain,
        '-',
        deployments [item].assets_certificate_name,
        '.cert',
      ] | join }}"
      --certificate-chain "{{ [
        'file://',
        WORK,
        '/cluster/',
        cluster_name,
        '/certificates/comodo-certificate-chain.cert',
      ] | join }}"
      --private-key "{{ [
        'file://',
        WORK,
        '/cluster/',
        cluster_name,
        '/certificates/',
        deployments [item].assets_domain,
        '-',
        deployments [item].assets_certificate_name,
        '.awskey',
      ] | join }}"
    || true;

- name: "write cloudformation config for assets"
  with_items: "{{ cluster.deployment_names | default ([]) }}"
  when: "deployments [item].type in [ 'shared', 'simple' ]"
  action:

    module: "template"
    dest: "{{ [
      WORK,
      '/cluster/',
      cluster_name,
      '/cloudformation/',
      item,
      '-assets-stack.yml',
    ] | join }}"
    src: "cluster-assets-stack"

- name: "create cloudformation stack for assets"
  with_items: "{{ cluster.deployment_names | default ([]) }}"
  when: "deployments [item].type in [ 'shared', 'simple' ]"
  register: "assets_stack_result"
  action:

    module: "cloudformation"
    stack_name: "{{ item }}-assets"
    state: "present"
    template: "{{ [
      WORK,
      '/cluster/',
      cluster_name,
      '/cloudformation/',
      item,
      '-assets-stack.yml',
    ] | join }}"
    template_format: "yaml"

    region: "{{ amazon_region_name }}"

    aws_access_key: "{{ amazon_credentials [amazon_account_name].access_key }}"
    aws_secret_key: "{{ amazon_credentials [amazon_account_name].secret_key }}"
    security_token: "{{ amazon_credentials [amazon_account_name].session_token }}"

- name: "store cloudformation details for assets"
  with_indexed_items: "{{ cluster.deployment_names | default ([]) }}"
  when: "deployments [item.1].type in [ 'shared', 'simple' ]"
  update_resource:

    "assets_cloudfront_{{ item.1 | replace ('-', '_') }}_id": "{{
      assets_stack_result.results [item.0].stack_outputs ['DistributionId']
    }}"

    "assets_cloudfront_{{ item.1 | replace ('-', '_') }}_domain": "{{
      assets_stack_result.results [item.0].stack_outputs ['DistributionDomain']
    }}"

# ex: et ts=2 filetype=yaml
