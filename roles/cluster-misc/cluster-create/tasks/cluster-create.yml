---

- when: "
    amazon_instance_state in [ 'running', 'standby' ]
    and amazon_instance_type != amazon_instance_type_running
    and cluster_name == 'production'
    and cluster_production_override != inventory_hostname
    and instance_id is defined
  "
  fail:

    msg: "must set cluster_production_override to make changes to production"

- when: "
    amazon_instance_state in [ 'running', 'standby' ]
    and amazon_instance_type != amazon_instance_type_running
    and instance_id is defined
  "
  block:

    - name: "remove instance from load balancer"
      when: "load_balancer_name is defined"
      local_action:

        module: "ec2_elb"
        instance_id: "{{ instance_id }}"
        ec2_elbs: "{{ load_balancer_name }}"
        state: "absent"

        region: "{{ amazon_region_name }}"

        aws_access_key: "{{ amazon_credentials [amazon_account_name].access_key }}"
        aws_secret_key: "{{ amazon_credentials [amazon_account_name].secret_key }}"
        security_token: "{{ amazon_credentials [amazon_account_name].session_token }}"

    - name: "stop cluster instance"
      local_action:

        module: "ec2"
        instance_ids: "{{ instance_id }}"
        state: "stopped"

        region: "{{ amazon_region_name }}"
        aws_access_key: "{{ amazon_credentials [amazon_account_name].access_key }}"
        aws_secret_key: "{{ amazon_credentials [amazon_account_name].secret_key }}"
        security_token: "{{ amazon_credentials [amazon_account_name].session_token }}"

        wait: "yes"

- name: "create cluster instance"
  when: "instance_id is not defined"
  register: "create_result"
  local_action:

    module: "ec2"

    instance_tags: "{{ amazon_instance_tags }}"
    count_tag: "{{ amazon_instance_create_count_tag }}"
    exact_count: 1

    image: "{{ amazon_image }}"
    instance_type: "{{ amazon_instance_type }}"
    key_name: "{{ amazon_key_name }}"

    group_id: "{{ amazon_security_group_id }}"
    instance_profile_name: "{{ amazon_instance_profile_name }}"

    vpc_subnet_id: "{{ amazon_vpc_subnet_id }}"
    private_ip: "{{ private_address }}"
    assign_public_ip: "no"
    source_dest_check: "no"

    volumes: "{{ cluster_create_volumes }}"

    region: "{{ amazon_region_name }}"

    aws_access_key: "{{ amazon_credentials [amazon_account_name].access_key }}"
    aws_secret_key: "{{ amazon_credentials [amazon_account_name].secret_key }}"
    security_token: "{{ amazon_credentials [amazon_account_name].session_token }}"

    wait: "yes"

- name: "set instance_id"
  when: "instance_id is not defined"
  update_resource:

    instance_id: "{{ create_result.tagged_instances.0.id }}"

- name: "start cluster instance"
  when: "amazon_instance_state in [ 'running', 'standby' ]"
  local_action:

    module: "ec2"
    instance_ids: "{{ instance_id }}"
    state: "running"

    instance_type: "{{ amazon_instance_type }}"
    ebs_optimized: "{{ amazon_instance_ebs_optimized }}"

    region: "{{ amazon_region_name }}"

    aws_access_key: "{{ amazon_credentials [amazon_account_name].access_key }}"
    aws_secret_key: "{{ amazon_credentials [amazon_account_name].secret_key }}"
    security_token: "{{ amazon_credentials [amazon_account_name].session_token }}"

- name: "set amazon_instance_type_running"
  when: "
    amazon_instance_state in [ 'running', 'standby' ]
    and amazon_instance_type != amazon_instance_type_running
  "
  update_resource:

    amazon_instance_type_running: "{{ amazon_instance_type }}"

# ex: et ts=2 filetype=yaml
