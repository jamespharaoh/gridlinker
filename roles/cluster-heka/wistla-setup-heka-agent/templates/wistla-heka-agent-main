{{ ansible_warning ['#'] }}

# ---------- basic configuration

[hekad]
maxprocs = 2
poolsize = 4096
base_dir = "{{ heka_target }}/var/cache"
share_dir = "{{ heka_target }}/share/heka"

#[dashboard]
#type = "DashboardOutput"
#address = ":4352"
#ticker_interval = 15

# ---------- read local log files

[input-syslog]
type = "LogstreamerInput"
log_directory = "/var/log"
file_match = "syslog"
decoder = "decode-syslog"

[decode-syslog]
type = "ScribbleDecoder"

	[decode-syslog.message_fields]
	Category = "system"

[input-auth]
type = "LogstreamerInput"
log_directory = "/var/log"
file_match = "auth.log"
decoder = "decode-auth"

[decode-auth]
type = "ScribbleDecoder"

	[decode-auth.message_fields]
	Category = "system"

{% for cluster_deployment_name in cluster.deployment_names | default ([]) %}
{% set cluster_deployment = deployments [cluster_deployment_name] %}
{% if cluster_deployment.type not in [ 'alias', 'alias2', 'virtual' ] %}
{% for log_name in [ 'wistla-api', 'wistla-browser', 'wistla-web' ] %}

[input-{{ cluster_deployment_name }}-{{ log_name }}]
type = "LogstreamerInput"
log_directory = "/data/{{ cluster_deployment_name }}/shared/log"
file_match = "{{ log_name }}.log"
decoder = "decode-{{ cluster_deployment_name }}-{{ log_name }}"

[decode-{{ cluster_deployment_name }}-{{ log_name }}]
type = "ScribbleDecoder"

	[decode-{{ cluster_deployment_name }}-{{ log_name }}.message_fields]
	Category = "{{ log_name }}"
	Deployment = "{{ cluster_deployment_name }}"
	Supercluster = "{{ supercluster_name }}"
	Cluster = "{{ cluster_name }}"
	Zone = "{{ instance_zone }}"

{% endfor %}
{% endif %}
{% endfor %}

{% for nginx_log_type in [ 'access', 'error', 'times' ] %}

[input-nginx-{{ nginx_log_type }}]
type = "LogstreamerInput"
log_directory = "/var/log/nginx"
file_match = "{{ nginx_log_type }}.log"
decoder = "decode-nginx-{{ nginx_log_type }}"

[decode-nginx-{{ nginx_log_type }}]
type = "ScribbleDecoder"

	[decode-nginx-{{ nginx_log_type }}.message_fields]
	Category = "nginx-{{ nginx_log_type }}"
	Supercluster = "{{ supercluster_name }}"
	Cluster = "{{ cluster_name }}"
	Zone = "{{ instance_zone }}"

{% endfor %}

# ---------- forward to master servers

{% for zone in [ 'a', 'b', 'c' ] %}

[output-admin-{{ zone }}]
type = "TcpOutput"
address = "wistla-{{ cluster_name }}-admin-{{ zone }}:5565"
keep_alive = true
keep_alive_period = 60
use_buffering = true
message_matcher = "TRUE"

{% endfor %}

# ex: noet ts=4 filetype=toml
