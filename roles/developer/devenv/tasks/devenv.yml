---

- name: "checkout projects from git"
  with_items: "{{ devenv_checkouts }}"
  when: "deployment_mode == 'vagrant'"
  tags: "checkout"
  args:

    executable: "/bin/bash"
    creates: "{{ deployment_home }}/{{ item.name }}"

  shell:

    set -euf -o pipefail;

    cd {{ deployment_home }};

    git clone
      {{ git_base_url }}/{{ item.name }}
      --branch {{ item.branch }};

- name: "create project links"
  with_items: "{{ devenv_checkouts | flatten_hash ('project_links') }}"
  become: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    link="{{ [
      deployment_home,
      item.outer.name,
      item.project_links.link,
    ] | join ('/') }}";

    overlay="{{ [
      deployment_home,
      item.outer.name,
      item.project_links.overlay,
    ] | join ('/') }}";

    target="$(
      cd "$(dirname "$link")";
      readlink --canonicalize "{{ item.project_links.target }}";
    )";

    if test -h "$link"; then
      rm "$link";
    fi;

    if ! test -d "$link"; then
      mkdir "$link";
      chown root.root "$link";
      chmod 0000 "$link";
    fi;

    if ! {
      cut -d' ' -f 2 </proc/mounts
        | grep -x "$link";
    }; then

      if ! test -d "$overlay"; then

        mkdir "$overlay";
        chown "{{ deployment_user }}:{{ deployment_user }}" "$overlay";

      fi;

      echo mount -t aufs -o "br=$overlay:$target" none "$link";
      mount -t aufs -o "br=$overlay:$target" none "$link";

      rm -rf "$link/node_modules" "$link/.git";

    fi;

- name: "create per-project nodejs version links"
  with_items: "{{ devenv_checkouts }}"
  when: "item.nodejs_version | default ('') == 'legacy'"
  become: "yes"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item.name }}/.nodejs-stub-target"
    state: "link"
    src: "/opt/node-v{{ nodejs_version_legacy }}-linux-x64"

- name: "delete per-project nodejs version links"
  with_items: "{{ devenv_checkouts }}"
  when: "item.nodejs_version | default ('') != 'legacy'"
  become: "yes"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item.name }}/.nodejs-stub-target"
    state: "absent"

- name: "create npm project link directories"
  with_items: "{{ devenv_checkouts | flatten_hash ('depends') }}"
  when: "{{ 'npm_name' in project_details [item.depends] }}"
  action:

    module: "file"
    path: "{{ [
      deployment_home,
      item.outer.name,
      'node_modules',
      project_details [item.depends].npm_name,
    ] | join ('/') | dirname }}"
    state: "directory"

- name: "create npm project links"
  with_items: "{{ devenv_checkouts | flatten_hash ('depends') }}"
  when: "{{ 'npm_name' in project_details [item.depends] }}"
  action:

    module: "file"
    path: "{{ [
      deployment_home,
      item.outer.name,
      'node_modules',
      project_details [item.depends].npm_name,
    ] | join ('/') }}"
    state: "link"

    src: "{{ [
      '../' * (project_details [item.depends].npm_name.split ('/') | length + 1),
      item.depends,
    ] | join }}"

- name: "run build steps"
  tags: "build"
  with_items: "{{ devenv_checkouts }}"
  args:

    executable: "/bin/bash"
    chdir: "{{ deployment_home }}/{{ item.name }}"

  shell: "{{ item.build_steps | default (['true']) | join (' && ') }}"

- name: "create git pre-commit hooks"
  with_items: "{{ devenv_checkouts }}"
  when: "deployment_mode == 'vagrant'"
  action:

    module: "template"
    dest: "{{ deployment_home }}/{{ item.name }}/.git/hooks/pre-commit"
    src: "devenv-git-hook-pre-commit"
    mode: "0755"

- name: "create git post-checkout hooks"
  with_items: "{{ devenv_checkouts }}"
  when: "deployment_mode == 'vagrant'"
  action:

    module: "template"
    src: "devenv-git-hook-post-checkout"
    dest: "{{ deployment_home }}/{{ item.name }}/.git/hooks/post-checkout"
    mode: "0755"

- name: "create shared directories"
  with_items: "{{ devenv_shared_directories }}"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item }}"
    state: "directory"

- name: "create config directories"
  tags: "config"
  with_items: "{{ devenv_config_directories }}"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item }}"
    state: "directory"

- name: "create shared logfiles"
  with_items: "{{ devenv_shared_logfiles }}"
  become: "yes"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item.log }}"
    state: "touch"

    owner: "{{ item.user }}"
    group: "{{ deployment_user }}"
    mode: "0640"

- name: "create config files"
  tags: "config"
  with_items: "{{ devenv_config_templates }}"
  become: "yes"
  action:

    module: "template"
    dest: "{{ deployment_home }}/config/{{ item.type }}/{{ item.target }}"
    src: "{{ item.template }}"

    owner: "{{ item.owner | default (deployment_user) }}"
    group: "{{ item.group | default (deployment_user) }}"
    mode: "{{ item.mode | default ('0644') }}"

- name: "stat override config files"
  tags: "config"
  with_items: "{{ devenv_override_templates }}"
  register: "devenv_stat_override_templates_result"
  action:

    module: "stat"
    path: "{{ deployment_home }}/{{ item.target }}"

- name: "create override config templates"
  tags: "config"
  with_indexed_items: "{{ devenv_override_templates }}"
  when: "not devenv_stat_override_templates_result.results [item.0].stat.exists"
  action:

    module: "template"
    dest: "{{ deployment_home }}/{{ item.1.target }}"
    src: "{{ item.1.template }}"

- name: "copy config files"
  tags: "config"
  with_items: "{{ devenv_config_files }}"
  action:

    module: "copy"
    dest: "{{ deployment_home }}/config/{{ item.type }}/{{ item.target }}"
    src: "{{ item.source }}"
    mode: "0644"

- name: "copy config secrets"
  tags: "config"
  with_items: "{{ devenv_config_secrets }}"
  when: "deployment_mode == 'vagrant' and 'dev' in secrets"
  action:

    module: "copy"
    dest: "{{ deployment_home }}/config/{{ item.type }}/{{ item.target }}"

    src: "{{ item.source }}"
    mode: "0600"

- name: "create links to config files"
  tags: "config"
  with_items: "{{ devenv_config_links }}"
  when: "deployment_mode == 'vagrant' or item.legacy | default ('no') == 'no'"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ item.dest }}"
    state: "link"
    src: "{{ item.src }}"
    force: "yes"

- name: "create deployment name link"
  tags: "config"
  when: "deployment_mode == 'vagrant'"
  action:

    module: "file"
    path: "{{ deployment_home }}/{{ deployment_name }}"
    state: "link"

    src: "."

- name: "create bridge network interface"
  register: "devenv_bridge_create_result"
  become: "yes"
  action:

    module: "template"
    src: "devenv-bridge-interface"
    dest: "/etc/network/interfaces.d/{{ deployment.bridge_name }}.cfg"

- name: "stop network bridge"
  when: "devenv_bridge_create_result | changed"
  register: "devenv_bridge_stop_result"
  changed_when: "devenv_bridge_stop_result.stdout != 'UNCHANGED'"
  become: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if ! ifquery --state {{ deployment.bridge_name }} >/dev/null; then
      echo "UNCHANGED";
      exit;
    fi

    ifdown {{ deployment.bridge_name }};

- name: "start network bridge"
  register: "devenv_bridge_start_result"
  changed_when: "devenv_bridge_start_result.stdout != 'UNCHANGED'"
  become: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if ifquery --state {{ deployment.bridge_name }} >/dev/null; then
      echo "UNCHANGED";
      exit;
    fi

    ifup {{ deployment.bridge_name }};

# ex: et ts=2 filetype=yaml
