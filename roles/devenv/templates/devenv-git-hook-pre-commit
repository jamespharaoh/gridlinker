#!/bin/sh

set -e

exec 1>&2

# main

main () {

	find_parent

	check_filenames
	check_whitespace
	check_jshint

	exit 0

}

# fix whitespace tool

fix_whitespace () {

	WHITESPACE_SCRIPT='
		s/[ \t\r][ \t\r]*$//;
	'

	temp=`tempfile`

	filenames=$(
		grep -l -P '[ \t\r]+$' "$@"
	)

	for file in $filenames; do

		echo $file

		sed "$SCRIPT" "$file" >$temp || exit 1

		#colordiff -U3 "$file" "$temp"

		mv "$temp" "$file"

	done

}

# parent is head, or empty for new repo

find_parent () {

	if git rev-parse --verify HEAD >/dev/null 2>&1; then
		against=HEAD
	else
		against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
	fi

}

# check filenames

check_non_ascii () {
	test $(
		git diff --cached --name-only --diff-filter=A -z $against \
		| LC_ALL=C tr -d '[ -~]\0' \
		| wc -c
	) != 0
}

check_filenames () {

	allownonascii=$(git config --bool hooks.allownonascii || true)

	if [ "$allownonascii" != "true" ] && check_non_ascii; then

		cat <<-EOF
			Error: non-ascii filenames detected
		EOF

		exit 1

	fi

}

# check whitespace

check_whitespace () {
	git diff-index --check --cached $against --
}

# run jshint

check_jshint () {

	local jshint="node_modules/.bin/jshint"

	if ! [ -f "$jshint" ]; then
		return
	fi

	local all_files

	all_files=$(
		git diff --cached --name-only --diff-filter=ACMR -- \
		'*.js' 'app/**.js' 'test/**.js' 'utils/**.js'
	)

	local pass="true"

	local one_file
	local one_result

	if [ "$all_files" ]; then

		for one_file in $all_files; do

			one_result=$(
				(
					git show :$one_file \
					| $jshint --filename $one_file --config .jshintrc -
				) || true
			)

			if [ "$one_result" != "" ]; then

				echo "$one_result"

				pass="false"

			fi

		done

	fi

	if $pass; then
		return
	fi

	echo ""
	echo "COMMIT FAILED:"
	echo "Some JavaScript files are invalid. Please fix errors and try committing again."

	exit 1

}

# done

main
