---

- name: "install nginx build dependencies"
  sudo: "yes"
  with_items: "{{ nginx_build_dependencies }}"
  action:

    module: "apt"
    name: "{{ item }}"

- name: "build nginx"
  when: "nginx_installed_version != nginx_version"
  sudo: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    rm -rf "{{ nginx_build_temp }}";
    mkdir -p "{{ nginx_build_temp }}";
    cd "{{ nginx_build_temp }}";

    wget --timeout=10 "{{ nginx_build_url }}";
    tar --extract --gz --file "{{ nginx_build_archive }}";
    cd "{{ nginx_build_directory }}";

    ./configure
      --with-cc-opt="
        -g
        -O2
        -fstack-protector
        --param=ssp-buffer-size=4
        -Wformat
        -Werror=format-security
      "
      --with-ld-opt="
        -Wl,-Bsymbolic-functions
        -Wl,-z,relro
        -Wl,--rpath={{ nginx_target }}/lib
      "
      --prefix="{{ nginx_target }}"
      --with-debug
      --with-pcre-jit
      --with-ipv6
      --with-http_gzip_static_module
      --with-http_ssl_module
      --with-http_stub_status_module
      --with-http_realip_module
      --with-http_v2_module;

    make install;

    cd /;
    rm -rf "{{ nginx_build_temp }}"

- name: "set nginx.state to 'installed'"
  when: "nginx_state == 'no'"
  update_resource:

    nginx.state: "installed"

- name: "set nginx.installed_version"
  when: "nginx_installed_version != nginx_version"
  update_resource:

    nginx.installed_version: "{{ nginx_version }}"

# ex: et ts=2 filetype=yaml
