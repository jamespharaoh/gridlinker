---

- name: "create deployment directory"
  become: "yes"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}"
    state: "directory"

    owner: "ubuntu"
    group: "ubuntu"
    mode: "0755"

- name: "create deployment link"
  action:

    module: "file"
    path: "/home/ubuntu/{{ cluster_deployment_name }}"
    state: "link"
    src: "{{ cluster_deployment_home }}"

- name: "create active deployment link"
  when: "
    cluster_deployment.type == 'alias'
    and cluster_deployment_alias.target == cluster_deployment_name
  "
  action:

    module: "file"
    path: "/home/ubuntu/{{ cluster_deployment.alias }}-active"
    state: "link"
    src: "{{ cluster_deployment_name }}"

- name: "checkout projects from git"
  tags: "checkout"
  with_items: "{{ cluster_deployment_checkouts }}"
  action:

    module: "git"
    dest: "{{ cluster_deployment_home }}/{{ item.name }}"
    repo: "git@github.com:/wistla/{{ item.name }}"
    refspec: "{{ item.branch }}"
    version: "{{ cluster_deployment.deployed_versions [item.name] }}"
    force: "yes"

- name: "create project links"
  with_items: "{{ cluster_deployment_checkouts | flatten_hash ('project_links') }}"
  become: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    link="{{ [
      cluster_deployment_home,
      item.outer.name,
      item.project_links.link,
    ] | join ('/') }}";

    canonical_link="$(
      readlink --canonicalize "$link"
    )"

    target="$(
      cd "$(dirname "$link")";
      readlink --canonicalize "{{ item.project_links.target }}";
    )";

    if {
      cut -d' ' -f 2 </proc/mounts
        | grep -x "$canonical_link";
    }; then
      umount "$canonical_link";
    fi;

    if test -h "$link"; then
      rm "$link";
    fi;

    rsync
      --archive
      --exclude=/.git
      --exclude=/node_modules
      --delete
      "$target/"
      "$link/";

- name: "create links to config files"
  with_items: "{{ cluster_deployment_config_links }}"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}/{{ item.target }}"
    state: "link"

    src: "{{ item.source }}"
    force: "yes"

- name: "run project build steps"
  tags: "build"
  with_items: "{{ cluster_deployment_checkouts }}"
  args:

    chdir: "{{ cluster_deployment_home }}/{{ item.name }}"

  shell: "{{ item.build_steps | default ([ 'true' ]) | join (' && ') }}"

- name: "create config directory"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}/config"
    state: "directory"

- name: "create config directories"
  with_items: "{{ cluster_deployment_config_directories }}"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}/config/{{ item }}"
    state: "directory"

- when: "{{ cluster_deployment.type == 'alias' }}"
  block:

    - name: "create shared link target"
      with_items:

        - "/data/{{ cluster_deployment.alias }}"
        - "/data/{{ cluster_deployment.alias }}/shared"

      become: "yes"
      action:

        module: "file"
        path: "{{ item }}"
        state: "directory"

        owner: "ubuntu"
        group: "ubuntu"
        mode: "0755"

    - name: "create main shared link"
      action:

        module: "file"
        path: "/home/ubuntu/{{ cluster_deployment.alias }}"
        state: "link"
        src: "/data/{{ cluster_deployment.alias }}"

    - name: "create shared link"
      action:

        module: "file"
        path: "{{ cluster_deployment_home }}/shared"
        state: "link"
        src: "../{{ cluster_deployment.alias }}/shared"

- name: "create shared directory"
  when: "cluster_deployment.type != 'alias'"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}/shared"
    state: "directory"

- name: "create shared directories"
  with_items: "{{ cluster_deployment_shared_directories }}"
  when: "cluster_deployment.type != 'alias'"
  become: "yes"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}/shared/{{ item.directory }}"
    state: "directory"

    owner: "{{ item.user }}"
    group: "ubuntu"
    mode: "0750"

- name: "create shared logfiles"
  with_items: "{{ cluster_deployment_shared_logfiles }}"
  become: "yes"
  action:

    module: "file"
    path: "{{ cluster_deployment_home }}/{{ item.log }}"
    state: "touch"

    owner: "{{ item.user }}"
    group: "ubuntu"
    mode: "0640"

- name: "create config files"
  with_items: "{{ cluster_deployment_config_templates }}"
  become: "yes"
  action:

    module: "template"
    dest: "{{ cluster_deployment_home }}/{{ item.target }}"
    src: "{{ item.template }}"

    owner: "{{ item.owner | default ('ubuntu') }}"
    group: "{{ item.group | default ('ubuntu') }}"
    mode: "{{ item.mode | default ('0644') }}"

- name: "copy config files"
  with_items: "{{ cluster_deployment_config_files }}"
  action:

    module: "copy"
    dest: "{{ cluster_deployment_home }}/{{ item.target }}"
    src: "{{ HOME }}/{{ item.source }}"
    mode: "{{ item.mode }}"

- name: "stat override config files"
  with_items: "{{ cluster_deployment_override_templates }}"
  register: "cluster_deployment_stat_override_templates_result"
  action:

    module: "stat"
    path: "{{ cluster_deployment_home }}/{{ item.target }}"

- name: "create override config templates"
  with_indexed_items: "{{ cluster_deployment_override_templates }}"
  when: "not cluster_deployment_stat_override_templates_result.results [item.0].stat.exists"
  action:

    module: "template"
    dest: "{{ cluster_deployment_home }}/{{ item.1.target }}"
    src: "{{ item.1.template }}"

- name: "create deployment bridge network interface"
  become: "yes"
  action:

    module: "template"
    dest: "/etc/network/interfaces.d/{{ cluster_deployment.bridge_name }}.cfg"
    src: "cluster-deployment-bridge-interface"

- name: "start deployment network bridge"
  register: "ifup_result"
  changed_when: "ifup_result.stdout != 'UNCHANGED'"
  become: "yes"
  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if ifquery --state {{ cluster_deployment.bridge_name }} >/dev/null; then
      echo "UNCHANGED";
      exit;
    fi;

    ifup {{ cluster_deployment.bridge_name }};

- name: "create logrotate config"
  become: "yes"
  action:

    module: "template"
    dest: "/etc/logrotate.d/wistla-{{ cluster_deployment_name }}"
    src: "cluster-deployment-wistla-logrotate"

- name: "create routes"
  tags: "route"
  when: "item != ''"
  with_items:

    - "{{ cluster_network.routes_admin_a | default ('') }}"
    - "{{ cluster_network.routes_admin_b | default ('') }}"
    - "{{ cluster_network.routes_admin_c | default ('') }}"
    - "{{ cluster_network.routes_app_a | default ('') }}"
    - "{{ cluster_network.routes_app_b | default ('') }}"
    - "{{ cluster_network.routes_app_c | default ('') }}"
    - "{{ cluster_network.routes_data_a | default ('') }}"
    - "{{ cluster_network.routes_data_b | default ('') }}"
    - "{{ cluster_network.routes_data_c | default ('') }}"
    - "{{ cluster_network.routes_jenkins_a | default ('') }}"
    - "{{ cluster_network.routes_jenkins_b | default ('') }}"
    - "{{ cluster_network.routes_jenkins_c | default ('') }}"

  connection: "local"
  environment:

    AWS_DEFAULT_REGION: "{{ amazon_region_name }}"

  args:

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    if test "{{ deployment_mode }}" = "vagrant"; then
      eval `cd {{ HOME }}; misc/amazon-auth {{ amazon_account_name }}`;
    fi;

    {

      aws ec2 replace-route
        --route-table-id "{{ item }}"
        --destination-cidr-block "{{ [
          cluster_deployment.bridge_network,
          instance_index,
          cluster_zone_indices [instance_zone] * 64,
        ] | join ('.') }}/26"
        --instance-id "{{ instance_id }}";

    } || {

      aws ec2 create-route
        --route-table-id "{{ item }}"
        --destination-cidr-block "{{ [
          cluster_deployment.bridge_network,
          instance_index,
          cluster_zone_indices [instance_zone] * 64,
        ] | join ('.') }}/26"
        --instance-id "{{ instance_id }}";

    };

# ex: et ts=2 filetype=yaml
