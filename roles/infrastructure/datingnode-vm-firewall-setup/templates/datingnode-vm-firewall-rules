#!/bin/bash

set -euf -o pipefail

PUBLIC_INTERFACES=(
	"eth0"
	"brpub0"
)

PUBLIC_ADDRESSES=(
	"{{ public_address }}"
{% for address in failover_primary %}
	"{{ address }}"
{% endfor %}
{% for address in failover_backup %}
	"{{ address }}"
{% endfor %}
)

PRIVATE_INTERFACES=(
	"eth1"
	"brprv0"
)

OPEN_PORTS_TCP=(
	"ssh"
	"http"
	"https"
)

OPEN_PORTS_UDP=(
)

# initialise filter tables

	iptables --table "filter" --flush
	iptables --table "filter" --delete-chain

	iptables --table "filter" --policy "INPUT" "ACCEPT"
	iptables --table "filter" --policy "FORWARD" "ACCEPT"
	iptables --table "filter" --policy "OUTPUT" "ACCEPT"

# restrict input from public internet

	iptables \
		--table "filter" \
		--append "INPUT" \
		--protocol "icmp" \
		--icmp-type "echo-request" \
		--jump "ACCEPT"

	for interface in "${PUBLIC_INTERFACES[@]}"; do

		for address in "${PUBLIC_ADDRESSES[@]}"; do

			iptables \
				--table "filter" \
				--append "INPUT" \
				--in-interface "$interface" \
				--destination "$address" \
				--match "state" \
				--state "ESTABLISHED,RELATED" \
				--jump "ACCEPT"

			if test -v "OPEN_PORTS_TCP"; then
			for port in "${OPEN_PORTS_TCP[@]}"; do

				iptables \
					--table "filter" \
					--append "INPUT" \
					--in-interface "$interface" \
					--destination "$address" \
					--protocol "tcp" \
					--destination-port "$port" \
					--jump "ACCEPT"

			done
			fi

			if test -v "OPEN_PORTS_UDP"; then
			for port in "${OPEN_PORTS_UDP[@]}"; do

				iptables \
					--table "filter" \
					--append "INPUT" \
					--in-interface "$interface" \
					--destination "$address" \
					--protocol "udp" \
					--destination-port "$port" \
					--jump "ACCEPT"

			done
			fi

		done

		iptables \
			--table "filter" \
			--append "INPUT" \
			--in-interface "$interface" \
			--jump "REJECT"

	done

# ex: noet ts=4 filetype=bash
