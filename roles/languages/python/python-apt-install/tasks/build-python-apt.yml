---

- name: "python apt build install system packages"
  with_items:

    - "build-essential"
    - "libapt-pkg-dev"

  when: "
    python_apt_installed_version != [
      python_installed_version,
      python_apt_version,
    ] | join ('/')
  "
  become: "yes"
  action:

    module: "apt"
    name: "{{ item }}"

- name: "python apt build install pip packages"
  with_items:

    - "sphinx"

  become: "yes"
  environment:

    PATH: "{{ python_target }}/bin:{{ lookup ('env', 'PATH') }}"

  action:

    module: "pip"
    name: "{{ item }}"

- name: "python apt build from source"
  when: "
    python_apt_installed_version != [
      python_installed_version,
      python_apt_version,
    ] | join ('/')
  "
  become: "yes"
  args:

    executable: "/bin/bash"

  environment:

    PATH: "{{ python_target }}/bin:{{ lookup ('env', 'PATH') }}"

  shell:

    set -euf -o pipefail;

    pip install
      sphinx;

    rm -rf "{{ python_temp }}";
    mkdir -p "{{ python_temp }}";
    cd "{{ python_temp }}";

    wget "{{ python_apt_url }}";
    tar --extract --gzip --file "{{ python_apt_archive }}";
    cd "{{ python_apt_name }}";

    python setup.py build;

    python setup.py install;

    cd /;
    rm -rf "{{ python_temp }}"

- name: "set python_apt.state to 'installed'"
  when: "python_apt_state == ''"
  update_resource:

    python_apt.state: "installed"

- name: "set python_apt.installed_version"
  when: "
    python_apt_installed_version != [
      python_installed_version,
      python_apt_version,
    ] | join ('/')
  "
  update_resource:

    python_apt.installed_version: "{{ [
      python_installed_version,
      python_apt_version,
    ] | join ('/') }}"

# ex: et ts=2 filetype=yaml
