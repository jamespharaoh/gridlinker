#!/bin/bash

set -euf -o pipefail

echo "-- starting postgres"

setuid postgres \
"{{ postgresql_lib }}/bin/postgres" \
	-D "{{ postgresql_data }}" &

postgresql_pid=$!

if test ! -f "{{ postgresql_data }}/recovery.conf"; then

	echo "-- sleeping"

	sleep 5

	echo "-- creating users"

	setuid postgres \
	psql -c "
	DO \$\$
	BEGIN

		-- replication user

		IF NOT EXISTS (
			SELECT *
			FROM pg_catalog.pg_user
			WHERE usename = '{{ postgresql_replication_user }}'
		) THEN

			CREATE ROLE {{ postgresql_replication_user }}
			LOGIN
			ENCRYPTED PASSWORD '{{ postgresql_replication_password }}';

		ELSE

			ALTER ROLE {{ postgresql_replication_user }}
			ENCRYPTED PASSWORD '{{ postgresql_replication_password }}';

		END IF;

		-- postgres user

		ALTER ROLE postgres
		ENCRYPTED PASSWORD '{{ postgresql_master_password }}';

		ALTER ROLE postgres
		SET search_path
		TO \"\$user\",public,gis;

		-- jimmy user

		IF NOT EXISTS (
			SELECT *
			FROM pg_catalog.pg_user
			WHERE usename = 'jimmy'
		) THEN

			CREATE ROLE jimmy
			LOGIN
			ENCRYPTED PASSWORD '{{ postgresql_user_password }}'
			SUPERUSER;

		ELSE

			ALTER ROLE jimmy
			ENCRYPTED PASSWORD '{{ postgresql_user_password }}';
			SUPERUSER;

		END IF;

		ALTER ROLE jimmy
		SET search_path
		TO \"\$user\",public,gis;

	END
	\$\$
	"

fi

wait $postgresql_pid

# ex: noet ts=4 filetype=bash
