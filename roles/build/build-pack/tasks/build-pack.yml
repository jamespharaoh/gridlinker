---

- name: "create directory"
  delegate_to: "localhost"
  run_once: "true"
  action:

    module: "file"
    path: "{{ deployment_home }}/work/build"
    state: "directory"

- name: "write metadata"
  with_items:

    - extension: "yml"
      template: "build-pack-manifest-yaml"

    - extension: "env"
      template: "build-pack-manifest-posix"

  delegate_to: "localhost"
  become: "yes"
  action:

    module: "template"
    dest: "/var/lib/lxc/{{ inventory_hostname }}/rootfs/MANIFEST.{{ item.extension }}"
    src: "{{ item.template }}"

- name: "create metadata dir"
  delegate_to: "localhost"
  become: "yes"
  action:

    module: "file"
    path: "/var/lib/lxc/{{ inventory_hostname }}/rootfs/MANIFEST"
    state: "directory"

- name: "name create metadata files"
  with_dict:

    build-host: "{{ lookup ('pipe', 'hostname') }}"
    build-user: "{{ lookup ('env', 'USER') }}"
    build-template: "{{ node_template }}"
    build-id: "{{ local_build_id }}"
    build-name: "{{ node_template }}-{{ local_build_id }}"
    build-timestamp: "{{ lookup ('pipe', 'date --utc +%Y-%m-%dT%H:%M:%SZ') }}"

  delegate_to: "localhost"
  become: "yes"
  action:

    module: "copy"
    dest: "/var/lib/lxc/{{ inventory_hostname }}/rootfs/MANIFEST/{{ item.key }}"
    content: "{{ item.value }}\n"

# ex: noet ts=2 filetype=sh

- name: "create package"
  delegate_to: "localhost"
  environment:

    build_source: "/var/lib/lxc/{{ inventory_hostname }}/rootfs"

    build_target: "{{ [
      builds_path,
      '/backups/',
      node_template,
      '-',
      local_build_id,
      '.tar',
    ] | join }}"

  args:

    creates: "{{ [
      builds_path,
      '/backups/',
      node_template,
      '-',
      local_build_id,
      '.tar',
    ] | join }}"

    executable: "/bin/bash"

  shell:

    set -euf -o pipefail;

    exec 200>{{ builds_path }}/lock;
    flock --exclusive 200;

    {
      sudo tar
        --create
        --one-file-system
        --directory "$build_source"
        --exclude "/var/cache/apt/*"
        ".";
    } | {
      zbackup backup "$build_target.temp"
        --cache-size {{ zbackup_cache_size }}
        --password-file "{{ deployment_build_secret_path }}"
        --silent;
    };

    mv "$build_target.temp" "$build_target";

# ex: et ts=2 filetype=yaml
