# {{ METADATA.project.title }}

Main website:

* {{ METADATA.project.website }}

Developers:

{% for developer in METADATA.developers %}
* {{ developer.name }} &lt;{{ developer.email }}&gt;
{% endfor %}

This project contains a self-contained automated system for setting up and
managing {{ METADATA.project.subject }}.

It is based on [gridlinker](https://github.com/wellbehavedsoftware/gridlinker),
which provides tools to manage data and a collection of general purpose
playbooks. It uses [etcd](https://github.com/coreos/etcd) to store runtime data,
and [ansible](https://github.com/ansible/ansible) to perform deployments.

This documentation is generated automatically, so please do not modify it
directly, or your changes will be overwritten.

## Requirements

This project depends on a recent version of python, currently 2.7.10. You can
download the [source code](https://www.python.org/downloads/) and compile this
yourself.

You will also need to download and install
[pip](https://pypi.python.org/pypi/pip), and a number of packages:

* `ipaddress`
* `jinja2`
* `netaddr`
* `paramiko`
* `pyopenssl`
* `pyyaml`

## Configuration

Most users will be provided with a copy of this software along with the relevant
configuration. If this is the case, you should be able to run commands directly,
and discover options via the built-in help.

```sh
cd {{ METADATA.project.name }}
./{{ METADATA.project.script }} --help
```

To set up a connection to an existing database, create `config/connections.yml`,
using the following template:

```yaml
---

{{ METADATA.project.name }}:

  etcd_servers: [ "{{ METADATA.etcd.default_servers | join ('", "') }}" ]
  etcd_secure: "{{ METADATA.etcd.default_secure }}"
  etcd_prefix: "{{ METADATA.etcd.default_prefix }}"

# ex: et ts=2 filetype=yaml
```

You also need to obtain a valid certificate, along with its private key, and the
ca certificate, from the administrator. These should be placed in the following
places:

* `config/{{ METADATA.project.name }}-ca.cert`
* `config/{{ METADATA.project.name }}.cert`
* `config/{{ METADATA.project.name }}.key`

To use a local etcd server, for example during development or testing or when
you are working online, use the following configuration:

```yaml
---

{{ METADATA.project.name }}:

  etcd_servers: [ "localhost" ]
  etcd_secure: "no"
  etcd_prefix: "{{ METADATA.etcd.default_prefix }}"

# ex: et ts=2 filetype=yaml
```

## Usage

Most actions are accomplished by running the management script, or by editing
files in this project. You can explore the command line options using the
built-in help:

```sh
./{{ METADATA.project.script }} --help
```

Most of the runtime configuration is stored in resource objects, which are
managed using the `resource` sub-command:

```sh
./{{ METADATA.project.script }} resource --help
./{{ METADATA.project.script }} resource list
```

To perform an ansible deployment, you can invoke `ansible-playbook` via the
management script, which performs initialisation tasks, such as creation of ssh
key and known hosts files, and the ansible configuration, and sets up the
environment.

```sh
./{{ METADATA.project.script }} ansible playbook -- --help
./{{ METADATA.project.script }} ansible playbook -- playbooks/NAME.yml [ARG...]
```

You can pass any extra arguments to be passed directly to the `ansible-playbook`
command, such as `--limit`, `--tags` or `--extra-vars`. See the [ansible
documentation](http://docs.ansible.com/playbooks_intro.html) for further
information.

The project configuration and static data is stored in the `data` directory.
Ansible playbooks and custom roles, if any, are stored in `playbooks`.
