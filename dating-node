#!/bin/bash

set -e

if ! test -f config; then
	echo "Please create config file, using config.template as a guide" >&2
	exit 1
fi

source "config"

if ! test -d ansible; then
	git clone git@github.com:ansible/ansible.git
fi

source ansible/hacking/env-setup &>/dev/null

function build_image () {

	base_image="$1"
	image_name="$2"
	container_name="$3"

	shift 3

	# kill and remove existing container

	docker kill "$container_name" 2>/dev/null || true

	docker rm "$container_name" 2>/dev/null || true

	# use existing image as base, if it exists

	if docker inspect "$image_name" &>/dev/null; then
		echo "updating existing image"
		base_image="$image_name"
	else
		echo "creating new image"
	fi

	# run the ansible scripts in a container

	docker run \
		--name "$container_name" \
		--volume "$(pwd):/datingnode-ansible" \
		--dns "$DNS_PRIMARY" \
		--dns "$DNS_SECONDARY" \
		--interactive \
		--tty \
		"$base_image" \
		/datingnode-ansible/misc/docker-ansible-script \
		"$@"

	# remove existing image

	docker rmi "$image_name" &>/dev/null || true

	# commit and tag new image

	image_id=$(
		docker commit "$container_name"
	)

	docker tag "$image_id" "$image_name"

	# push to server

	docker push "$image_name"

	# remove container

	docker rm "$container_name"

}

function do_image_clean () {

	for container in \
			"$CONTAINER_BASE" \
			"$CONTAINER_DATABASE"; do

		echo "Removing container $container"

		docker kill "$container" &>/dev/null || true

		docker rm "$container" &>/dev/null || true

	done

	for image in \
			"$IMAGE_BASE" \
			"$IMAGE_DATABASE"; do

		echo "Removing image $image"

		docker rmi "$image" &>/dev/null || true

	done

}

function do_image_build_base () {

	build_image \
		"$IMAGE_UBUNTU" \
		"$IMAGE_BASE" \
		"$CONTAINER_BASE" \
		init-system \
		init-ansible \
		build-common

}

function do_image_build_database () {

	build_image \
		"$IMAGE_BASE" \
		"$IMAGE_DATABASE" \
		"$CONTAINER_DATABASE" \
		build-common \
		build-database

}

function do_image_build_all () {

	do_image_build_base

	do_image_build_database

}

function do_cluster_start () {

	cluster="$1"
	shift

	ansible-playbook \
		--extra-vars @settings \
		--inventory hosts \
		--inventory "$cluster" \
		tasks/start.yml \
		"$@"

}

function do_hosts () {

	ansible-playbook \
		--extra-vars @settings \
		--inventory hosts \
		tasks/hosts.yml \
		"$@"

}

function do_local_stop () {

	cluster="$1"

	ansible-playbook \
		--extra-vars @settings \
		--inventory hosts \
		--inventory "$cluster" \
		tasks/stop.yml \
		"$@"

}

function do_cluster_destroy () {

	cluster="$1"

	ansible-playbook \
		--extra-vars @settings \
		--inventory hosts \
		--inventory "$cluster" \
		tasks/destroy.yml \
		"$@"

}

function do_cluster_delete () {

	cluster="$1"

	ansible-playbook \
		--extra-vars @settings \
		--inventory hosts \
		--inventory "$cluster" \
		tasks/delete.yml \
		"$@"

}

if test "$#" = 0; then

	cat >&2 <<-EOF

		Dating Node devops script

		Usage:

		   $0 COMMAND...

		Available commands:

		   Manager server infrastructure:
		      hosts                Configure servers

		   Manage docker images:
		      image-clean          Delete all images
		      image-build-all      Build all images
		      image-build-base     Build base image
		      image-build-database Build databsse image

		   Manage xyz cluster:
		      xyz-start            Start existing
		      xyz-stop             Stop existing
		      xyz-destroy          Stop and destroy
		      xyz-delete           Destroy and delete all data

	EOF

	exit

fi

command="$1"
shift

case "$command" in

(image-clean)
	do_image_clean
	;;

(image-build-all)
	do_image_build_all
	;;

(image-build-base)
	do_image_build_base
	;;

(image-build-database)
	do_image_build_database
	;;

(hosts)
	do_hosts "$@"
	;;

(*-start)
	do_cluster_start "${command%%-*}" "$@"
	;;

(*-stop)
	do_cluster_stop "${command%%-*}" "$@"
	;;

(*-destroy)
	do_cluster_destroy "${command%%-*}" "$@"
	;;

(*-delete)
	do_cluster_delete "${command%%-*}" "$@"
	;;

(*)
	echo "Error"
	exit 1
	;;

esac
