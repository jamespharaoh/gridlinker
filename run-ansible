#!/bin/bash

set -e

project_dir_relative=$(dirname "$0")
project_dir=$(readlink -f "$project_dir_relative")
basename=$(basename "$0")

cd "$project_dir"

# load config

eval $(misc/yaml-to-bash config <config)

# mount secrets

for secret in "${config_secrets[@]}"; do

	if grep -q "^encfs $project_dir/security/$secret-plain " /proc/mounts; then
		continue
	fi

	echo "Mounting secrets for $secret"

	encfs \
		"$project_dir/security/$secret-cipher" \
		"$project_dir/security/$secret-plain" \
		-- \
		-o allow_root

done

# always run as root

if test "$UID" != "0"; then
	exec sudo "$0" "$@"
fi

# check deployment mode

if ! test "$config_deployment_mode"; then
	config_deployment_mode="vagrant"
fi

case "$config_deployment_mode" in

	(vagrant)

		if test "$HOSTNAME" != "wistla-dev"; then
			echo "This command must be run from inside vagrant" >&2
			echo "Please run 'vagrant ssh' and try again" >&2
			exit 1
		fi

		echo "Running in VAGRANT deployment mode"

		deployment_home="/home/vagrant"
		deployment_user="vagrant"

		;;

	(direct)

		echo "Running in DIRECT deployment mode"

		deployment_home="/home/ubuntu"
		deployment_user="ubuntu"

		;;

	(jenkins)

		echo "Running in JENKINS deployment mode"

		deployment_home="$WORKSPACE"
		deployment_user="jenkins"

		;;

	(*)

		echo "Unrecognised deployment mode: $config_deployment_mode"
		exit 1

		;;

esac

# load ansible environment

source ansible/hacking/env-setup >/dev/null

export PYTHONUNBUFFERED=1

# fix config

if test "$config_deployment_mode" = "vagrant"; then

	ansible-playbook \
		--inventory-file inventory \
		--extra-vars @config \
		--limit vagrant \
		fix-config.yml

	if ! test -f accounts; then
		cat >accounts <<-END
			---

			amazon_accounts:
			  production:
			    access_key: ""
			    secret_key: ""
			  staging:
			    access_key: ""
			    secret_key: ""
			  test:
			    access_key: ""
			    secret_key: ""
			  ops:
			    access_key: ""
			    secret_key: ""

			# ex: et ts=2 filetype=yaml
		END
		chown $deployment_user:$deployment_user accounts
	fi

fi

# fix permissions of secret files

if test -d security/secrets-plain; then
	chmod -R u=rwX,go= security/secrets-plain
fi

# run ansible-playbook

exec ansible-playbook \
	--inventory-file inventory \
	--extra-vars @config \
	--extra-vars @accounts \
	"${@}"

# ex: noet ts=4 filetype=bash
