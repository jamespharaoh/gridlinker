#!/usr/bin/env python

import os
import pipes
import socket
import subprocess
import sys

import yaml

def main ():

	always_run_as_root ()
	basic_setup ()

	load_config ()
	check_deployment_mode ()
	mount_secrets ()
	update_config ()

	run_given_playbook ()

def always_run_as_root ():

	if os.getuid () != 0:

		os.execv (
			"/usr/bin/sudo",
			[ __file__ ] + sys.argv)

def basic_setup ():

	global HOME

	HOME = os.path.abspath (os.path.dirname (__file__))
	os.chdir (HOME)

def load_config ():

	global CONFIG

	try:
		CONFIG = yaml.load (file ("config"))
	except IOError:
		CONFIG = dict ({ "deployment_mode": "vagrant" })

def check_deployment_mode ():

	if CONFIG ["deployment_mode"] == "vagrant":

		if socket.gethostname () != "wistla-dev":

			sys.stderr.write ("\n".join ([
				"This command must be run from inside vagrant",
				"Please run 'vagrant ssh' and try again, or refer to the documentation",
			]) + "\n");

			sys.exit (1);

		print "Running in VAGRANT deployment mode"

		DEPLOYMENT_HOME = "/home/vagrant"
		DEPLOYMENT_USER = "vagrant"

	elif CONFIG ["deployment_mode"] == "direct":

		print "Running in DIRECT deployment mode"

		DEPLOYMENT_HOME = "/home/ubuntu"
		DEPLOYMENT_USER = "ubuntu"

	elif CONFIG ["deployment_mode"] == "jenkins":

		print "Running in JENKINS deployment mode"

		DEPLOYMENT_HOME = "$WORKSPACE"
		DEPLOYMENT_USER = "jenkins"

	else:

		sys.stderr.write (
			"Unrecognised deployment mode: %s\n" % (
				CONFIG ["deployment_mode"]))

		sys.exit (1)

def mount_secrets ():

	subprocess.check_call ("./mount-secrets")

def run_playbook (args):

	ansible_command = " ".join ([
		pipes.quote (arg) for arg in [
			"ansible-playbook",
			"--inventory-file", "inventory",
			"--extra-vars", "@config",
			"--extra-vars", "@accounts",
		] + args
	])

	print ansible_command

	subprocess.check_call (
		[
			"/bin/bash",
			"-c",
			" && ".join ([
				"source ansible/hacking/env-setup >/dev/null",
				ansible_command,
			]),
		],
		env = dict ({
			"PYTHONUNBUFFERED": "1",
		}))

def update_config ():

	if CONFIG ["deployment_mode"] == "vagrant":

		if not os.path.isfile ("accounts"):

			with open ("accounts", "w") as file_handle:

				file_handle.write ("\n".join ([
					"---",
					"",
					"amazon_accounts:",
					"",
					"  production:",
					"    access_key: \"\"",
					"    secret_key: \"\"",
					"",
					"  staging:",
					"    access_key: \"\"",
					"    secret_key: \"\"",
					"",
					"  test:",
					"    access_key: \"\"",
					"    secret_key: \"\"",
					"",
					"  ops:",
					"    access_key: \"\"",
					"    secret_key: \"\"",
					"",
					"# ex: et ts=2 filetype=yaml",
				]) + "\n")

			os.chown ("accounts", 1000, 1000)

		run_playbook ([
			"--limit", "vagrant",
			"fix-config.yml",
		])

def run_given_playbook ():

	if not sys.argv [1:]:
		return

	try:

		run_playbook (sys.argv [1:])

		sys.stderr.write ("\n##### Success #####\n\n")

	except subprocess.CalledProcessError as exception:

		sys.stderr.write ("\n##### Error %s #####\n\n" % exception.returncode)
		sys.exit (1)

main ()

# ex: noet ts=4 filetype=python
