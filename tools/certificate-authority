#!/usr/bin/env python

import argparse
import itertools

import dnode
import dnode.authority
import dnode.data

def main ():

	parser = argparse.ArgumentParser ()
	sub_parsers = parser.add_subparsers ()

	# ---------- create

	parser_create = sub_parsers.add_parser ('create')
	parser_create.set_defaults (func = do_create)

	parser_create.add_argument ('--authority', required = True)
	parser_create.add_argument ('--common-name', required = True)

	# ---------- issue

	parser_issue = sub_parsers.add_parser ('issue')
	parser_issue.set_defaults (func = do_issue)

	parser_issue.add_argument ("--authority", required = True)
	parser_issue.add_argument ("--common-name", required = True)

	# type

	parser_issue_type = parser_issue.add_mutually_exclusive_group (required = True)

	parser_issue_type.add_argument (
		"--server",
		action = "store_const",
		const = "server",
		dest = "type")

	parser_issue_type.add_argument (
		"--client",
		action = "store_const",
		const = "client",
		dest = "type")

	parser_issue_type.add_argument (
		"--mixed",
		action = "store_const",
		const = "mixed",
		dest = "type")

	# store

	parser_issue_store = parser_issue.add_argument_group (
		"store")

	parser_issue_store.add_argument (
		"--store-database")

	parser_issue_store.add_argument (
		"--store-host")

	parser_issue_store.add_argument (
		"--store-host-key")

	# alt names

	parser_issue_alt_names = parser_issue.add_argument_group (
		"alt names")

	parser_issue_alt_names = parser_issue.add_argument_group (
		"alt names")

	parser_issue_alt_names.add_argument (
		"--alt-dns",
		default = [],
		action = "append")

	parser_issue_alt_names.add_argument (
		"--alt-ip",
		default = [],
		action = "append")

	parser_issue_alt_names.add_argument (
		"--alt-email",
		default = [],
		action = "append")

	# ---------- etc

	args = parser.parse_args ()
	args.func (args)

def do_create (args):

	dnode_client = dnode.get_client ()

	authority = dnode.authority.Authority (
		dnode_client,
		"/authority/" + args.authority,
		dnode.certificate_data)

	authority.create (args.common_name)

	print "Certificate authority created"

def do_issue (args):

	dnode_client = dnode.get_client ()

	authority = dnode.authority.Authority (
		dnode_client,
		"/authority/" + args.authority,
		dnode.certificate_data)

	authority.load ()

	alt_names = list (itertools.chain.from_iterable ([
		[ "DNS:" + alt_dns for alt_dns in args.alt_dns ],
		[ "IP:" + alt_ip for alt_ip in args.alt_ip ],
		[ "email:" + alt_email for alt_email in args.alt_email ],
	]))

	issue_serial, issue_digest = authority.issue (
		args.type,
		args.common_name,
		alt_names)

	print "Created certificate %s %s %s" % (
		issue_serial,
		issue_digest,
		args.common_name)

	if args.store_host and args.store_key:

		host_data = wbs_client.get_host (args.store_host)
		host_data [args.store_key] = issue_digest
		wbs_client.set_host (args.store_host, host_data)

		print "Stored as %s in host %s" % (
			args.store_key,
			args.store_host)

main ()
